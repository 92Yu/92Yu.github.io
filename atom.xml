<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿西BUG的博客</title>
  
  <subtitle>九华不至一线天，井底妄取两星辰！天意难随恍虚梦，壮志未酬怎回头？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.92yu.win/"/>
  <updated>2021-07-04T07:46:32.239Z</updated>
  <id>http://blog.92yu.win/</id>
  
  <author>
    <name>阿西BUG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown 语法（精简版）</title>
    <link href="http://blog.92yu.win/2021/07/04/Markdown%20%E8%AF%AD%E6%B3%95/"/>
    <id>http://blog.92yu.win/2021/07/04/Markdown 语法/</id>
    <published>2021-07-04T07:46:32.239Z</published>
    <updated>2021-07-04T07:46:32.239Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><hr><p><em>节选自<a href="http://www.appinn.com/markdown/index.html" target="_blank" rel="noopener">Markdown官方文档</a></em></p><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank"> [ 维基百科 ]</a></p><h3 id="标题层级"><a href="#标题层级" class="headerlink" title="标题层级"></a>标题层级</h3><blockquote><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：<br><code>This is an H1</code><br><code>=============</code><br><code>This is an H2</code><br><code>-------------</code><br>任何数量的 = 和 - 都可以有效果。<br>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：<br><code># 这是 H1</code><br><code>## 这是 H2</code><br><code>###### 这是 H6</code><br>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：<br><code># 这是 H1 #</code><br><code>## 这是 H2 ##</code><br><code>### 这是 H3 ######</code></p></blockquote><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><blockquote><p>可以使用+，-，*做为列表的项目标记,列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p></blockquote><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><blockquote><p><code>形如：**test**</code>,    <strong>test</strong> </p></blockquote><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><blockquote><p><code>形如：*test*</code>,    <em>test</em> </p></blockquote><h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><blockquote><p>1. <code>形如：[xxx](http://www.baidu.com)</code> , <a href="http://www.baidu.com" target="_blank" rel="noopener">xxx</a><br>  2. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记,<code>This is [an example][id] reference-style link</code>,接着，在文件的任意处，你可以把这个标记的链接内容定义出来,<code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code><br>  This is <a href="http://example.com/" title="Optional Title Here" target="_blank" rel="noopener">an example</a> reference-style link.</p></blockquote><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><blockquote><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。<br>  Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>  行内式的图片语法看起来像是：<br>  <code>![Alt text](/path/to/img.jpg)</code><br>  <code>![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code><br>  详细叙述如下：<br>  1.一个惊叹号 !<br>  2.接着一个方括号，里面放上图片的替代文字<br>  3.接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。<br>  参考式的图片语法则长得像这样：<br>  <code>![Alt text][id]</code><br>  「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：<br>  <code>[id]: url/to/image  &quot;Optional title attribute&quot;</code><br>  到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。<br>  eg:<br>  <code>&lt;img src=&quot;/blog_pic/HeadPic.jpg&quot; height=&quot;200&quot; width=&quot;200&quot; /&gt;</code><br>  <img src="/blog_pic/HeadPic.jpg" height="200" width="200"></p></blockquote><h3 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h3><blockquote><p>要在 Markdown 中建立代码区块很简单，只要简单地使用三个反引号即可,如下例所示<br>  this is normal part。<br>  ```<br>  this is code part。<br>  ```<br>  表示为：<br>  this is normal part。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is code part。</span><br></pre></td></tr></table></figure></p><p>要想在文字中见插入简短的代码，只需在代码的开始和结束各使用单个反引号即可。</p></blockquote><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号<br>例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：<code>\*literal asterisks\*</code>,表示为*literal asterisks*<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</em></p><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>\</td><td>反斜线</td></tr><tr><td>`</td><td>反引号</td></tr><tr><td>*</td><td>星号</td></tr><tr><td>_</td><td>底线</td></tr><tr><td>{}</td><td>花括号</td></tr><tr><td>[]</td><td>方括号</td></tr><tr><td>()</td><td>括弧</td></tr><tr><td>#</td><td>井字号</td></tr><tr><td>+</td><td>加号</td></tr><tr><td>-</td><td>减号</td></tr><tr><td>.</td><td>英文句点</td></tr><tr><td>!</td><td>惊叹号</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      精简部分常用的Markdown语法
    
    </summary>
    
    
      <category term="Other" scheme="http://blog.92yu.win/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>信标(Beacon)--数据上传好帮手</title>
    <link href="http://blog.92yu.win/2021/06/30/%E4%BF%A1%E6%A0%87-Beacon-%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%BC%A0%E5%A5%BD%E5%B8%AE%E6%89%8B/"/>
    <id>http://blog.92yu.win/2021/06/30/信标-Beacon-数据上传好帮手/</id>
    <published>2021-06-30T14:53:33.000Z</published>
    <updated>2021-07-04T07:46:32.240Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</strong></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>日常开发过程中，难免会遇到日志记录相关的需求。有一种需求是需要记录用户在页面停留时间，自然而然的会想到方案：当页面加载时，我们会记录下时间，当用户离开页面时，我们将发送开始时间和当前时间到服务器。<br>那么我们会使用什么方法来上传信息到服务器呢？<br>通常是发送一个GET请求（一般是一个带有统计信息的图片请求），使统计服务器获取到数据。<br>这种方式有以下几个弊端：<br>1.当页面关闭时，发送的统计请求可能不会成功，导致统计数据丢失。<br>2.通常为了解决关闭页面的统计数据丢失问题，会发起一个同步的请求，这样会阻塞页面的卸载。<br>3.GET请求通常有长度限制，可携带的数据量有限，并且一般只能携带文本信息。  </p><p>那么如何解决上述问题呢？我们引入今天的主角–Beacon API.  </p><h1 id="什么是Beacon-API"><a href="#什么是Beacon-API" class="headerlink" title="什么是Beacon API"></a>什么是Beacon API</h1><p>MDN 是这样描述的</p><blockquote><p>The Beacon API is used to send an asynchronous and non-blocking request to a web server. The request does not expect a response. Unlike requests made using XMLHttpRequest or the Fetch API, the browser guarantees to initiate beacon requests before the page is unloaded and to run them to completion.</p></blockquote><p>翻译成人话就是</p><blockquote><p>BeaconAPI 用于向 Web 服务器发送异步和非阻塞请求。该请求不期望得到响应。与使用XMLHttpRequest或Fetch API发出的请求不同，浏览器保证在页面卸载之前启动信标请求并运行它们直到完成。 </p></blockquote><p>重点是 <strong>不期望得到响应</strong>，这意味着我们无需等待响应的过程，只需要发送就好了。</p><h1 id="Beacon-API-使用方法"><a href="#Beacon-API-使用方法" class="headerlink" title="Beacon API 使用方法"></a>Beacon API 使用方法</h1><p>Beacon 定义了一个方法：<code>navigator.sendBeacon(url, data);</code><br>这个接口定义了2个参数，url和要在请求中发送的数据data。其中数据参数是可选的，并且它的类型可以是<code>ArrayBufferView</code>，<code>Blob</code>，<code>DOMString</code>，或<code>FormData</code>。如果浏览器成功排队发送请求，该方法返回<code>true</code>；否则，它返回<code>false</code>。  </p><p>需要注意的是：这个方法并不是适用所有的浏览器，因此我们需要在使用前判断当前环境是否支持。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (navigator.sendBeacon) &#123;</span><br><span class="line">  // Beacon API</span><br><span class="line">&#125; else &#123;</span><br><span class="line"> // fallback sync XHR / Fetch API / Axios</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>常见的浏览器兼容情况如图<br><img src="http://image.hoacaini.com/blog/Beacon%20API%20%E5%85%BC%E5%AE%B9%E6%83%85%E5%86%B5.png" alt="Beacon API 兼容情况"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let logVisit = function() &#123;</span><br><span class="line">  // 测试我们拥有 Beacon 支持</span><br><span class="line">  if (!navigator.sendBeacon) return true;</span><br><span class="line">      </span><br><span class="line">  // 数据发送的URL的例子</span><br><span class="line">  let url = &apos;/api/log-visit&apos;;</span><br><span class="line">      </span><br><span class="line">  // 要发送的数据</span><br><span class="line">  let data = new FormData();</span><br><span class="line">  data.append(&apos;start&apos;, startTime);</span><br><span class="line">  data.append(&apos;end&apos;, performance.now());</span><br><span class="line">  data.append(&apos;url&apos;, document.URL);</span><br><span class="line">      </span><br><span class="line">  // 发送</span><br><span class="line">  navigator.sendBeacon(url, data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，如果没有 Beacon 支持，我们返回 true ，假装一切正常。返回 false 会取消事件并且终止页面卸载。那给用户的感觉就是页面卡住了。</p><h1 id="统计数据上报的优雅姿势"><a href="#统计数据上报的优雅姿势" class="headerlink" title="统计数据上报的优雅姿势"></a>统计数据上报的优雅姿势</h1><p>这里我们借鉴一片优秀文章的总结：<br><img src="http://image.hoacaini.com/blog/%E4%BC%98%E9%9B%85%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8A%E6%8A%A5%E6%96%B9%E5%BC%8Fpng" alt="优雅的数据上报"><br>具体文章<a href="https://developer.aliyun.com/article/752954" target="_blank" rel="noopener">戳这里</a></p>]]></content>
    
    <summary type="html">
    
      一种新的日志上传方式
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.92yu.win/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中readonly和const</title>
    <link href="http://blog.92yu.win/2020/12/07/TypeScript%E4%B8%ADreadonly%E5%92%8Cconst/"/>
    <id>http://blog.92yu.win/2020/12/07/TypeScript中readonly和const/</id>
    <published>2020-12-07T15:41:15.000Z</published>
    <updated>2021-07-04T07:46:32.239Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</strong> </p></blockquote><h1 id="readonly-属性修饰符"><a href="#readonly-属性修饰符" class="headerlink" title="readonly 属性修饰符"></a>readonly 属性修饰符</h1><blockquote><p>readonly 是一个属性(property) 修饰符，顾名思义，在 TypeScript 中它可以把一个属性变成只读的。我们可以在 <strong>class/interface/type</strong> 定义中使用它，也可以用来定义一个函数的参数。既然是只读的意味着一旦定义了就不能再修改，所以这些属性必须在声明的时候或者在类中对它进行初始化。  </p><p>TypeScript 类型系统允许你在一个 function 里使用 readonly 来标记参数属性。它能让你以一种更安全的方式工作（不可预期的改变通常会带来很糟糕的后果）。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">config: &#123; readonly bar: <span class="built_in">number</span>, readonly bas: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123; bar: <span class="number">123</span>, bas: <span class="number">123</span> &#125;;</span><br><span class="line">foo(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在你能够确保 'config' 不能够被改变了</span></span><br></pre></td></tr></table></figure></p></blockquote><p>当然，你也可以在 interface 和 type 里使用 readonly：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type</span></span><br><span class="line"><span class="keyword">type</span> Foo = &#123;</span><br><span class="line">  readonly bar: <span class="built_in">number</span>;</span><br><span class="line">  readonly bas: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> foo: Foo = &#123; bar: <span class="number">123</span>, bas: <span class="number">456</span> &#125;;</span><br><span class="line"><span class="comment">// 不能被改变</span></span><br><span class="line">foo.bar = <span class="number">456</span>; <span class="comment">// Error: foo.bar 为仅读属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">  readonly [x: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> foo: Foo = &#123; <span class="number">0</span>: <span class="number">123</span>, <span class="number">2</span>: <span class="number">345</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>]); <span class="comment">// ok（读取）</span></span><br><span class="line">foo[<span class="number">0</span>] = <span class="number">456</span>; <span class="comment">// Error: 属性只读</span></span><br></pre></td></tr></table></figure></p><p>你也能指定一个类的属性为只读，然后在声明时或者构造函数中初始化它们，如下所示：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">  readonly bar = <span class="number">1</span>; <span class="comment">// OK</span></span><br><span class="line">  readonly baz: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.baz = <span class="string">'hello'</span>; <span class="comment">// OK</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Readonly-映射类型"><a href="#Readonly-映射类型" class="headerlink" title="Readonly 映射类型"></a>Readonly 映射类型</h1><blockquote><p>对于每个属性都要写一个 readonly 的做法实在是不够优雅。作为一个推崇 Less is more (lan duo) 的人，能够少写一点就尽量少写。有没有一种方法可以一键给所有属性添加 readonly 定义呢？有的，官方标准库 lib.es5.d.ts 提供了一个方法 Readonly<t> 把对象上所有属性变为只读。</t></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo = &#123;</span><br><span class="line">  bar: <span class="built_in">number</span>;</span><br><span class="line">  bas: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FooReadonly = Readonly&lt;Foo&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo: Foo = &#123; bar: <span class="number">123</span>, bas: <span class="number">456</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> fooReadonly: FooReadonly = &#123; bar: <span class="number">123</span>, bas: <span class="number">456</span> &#125;;</span><br><span class="line"></span><br><span class="line">foo.bar = <span class="number">456</span>; <span class="comment">// ok</span></span><br><span class="line">fooReadonly.bar = <span class="number">456</span>; <span class="comment">// Error: bar 属性只读</span></span><br></pre></td></tr></table></figure><p><font color="red">NOTE</font>: 需要注意的是，Readonly<t> 只对它当前修饰的属性有效，并不会对嵌套属性产生影响:<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> foo &#123;</span><br><span class="line">    readonly bar: <span class="built_in">string</span>;</span><br><span class="line">    readonly baz: &#123;</span><br><span class="line">        hoo: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fuu: foo = &#123;</span><br><span class="line">    bar: <span class="string">'bar'</span>,</span><br><span class="line">    baz: &#123;</span><br><span class="line">        hoo: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fuu.baz = &#123; hoo: <span class="number">2</span> &#125; <span class="comment">// ❌  </span></span><br><span class="line">fuu.baz.hoo = <span class="number">3</span>; <span class="comment">// ✅</span></span><br><span class="line"><span class="comment">// 要在嵌套里面再使用 Readonly&lt;T&gt;</span></span><br><span class="line"><span class="keyword">interface</span> foo &#123;</span><br><span class="line">    readonly bar: <span class="built_in">string</span>;</span><br><span class="line">    readonly baz: Readonly&lt;&#123;</span><br><span class="line">        hoo: <span class="built_in">number</span>;</span><br><span class="line">    &#125;&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p><h1 id="与-const-区别"><a href="#与-const-区别" class="headerlink" title="与 const 区别"></a>与 const 区别</h1><p><code>const</code>:</p><ol><li>用于变量；</li><li>变量不能重新赋值给其他任何事物  </li></ol><p><code>readonly</code>:</p><ol><li>用于属性</li><li>用于别名，可以修改属性</li></ol><p>eg:<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">123</span>; <span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">let</span> bar: &#123;</span><br><span class="line">  readonly bar: <span class="built_in">number</span>; <span class="comment">// 属性</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><br></p><p><center> — end — </center></p>]]></content>
    
    <summary type="html">
    
      ts语言中 readonly 属性和 const 属性的区别
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.92yu.win/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="http://blog.92yu.win/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>CocosCreator优化DrawCall漫谈</title>
    <link href="http://blog.92yu.win/2020/08/07/CocosCreator%E4%BC%98%E5%8C%96%E4%B9%8BDrawCall%E6%BC%AB%E8%B0%88/"/>
    <id>http://blog.92yu.win/2020/08/07/CocosCreator优化之DrawCall漫谈/</id>
    <published>2020-08-07T13:32:28.000Z</published>
    <updated>2021-07-04T07:46:32.238Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</strong></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在游戏开发中，DrawCall 作为一个非常重要的性能指标，直接影响游戏的整体性能表现。<br>无论是 Cocos Creator、Unity、Unreal 还是其他游戏引擎，只要说到游戏性能优化，DrawCall 都是绝对少不了的一项。<br>本文将会介绍什么是 DrawCall，为什么要减少 DrawCall 以及在 Cocos Creator 项目中如何减少 DrawCall 来提升游戏性能。  </p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="什么是-DrawCall"><a href="#什么是-DrawCall" class="headerlink" title="什么是 DrawCall"></a>什么是 DrawCall</h2><blockquote><p>DrawCall就是CPU调用图形库（比如DirectX或OpenGL）的图形绘制接口，来命令GPU进行渲染的操作。</p></blockquote><h2 id="DrawCall-是如何影响性能的呢？"><a href="#DrawCall-是如何影响性能的呢？" class="headerlink" title="DrawCall 是如何影响性能的呢？"></a>DrawCall 是如何影响性能的呢？</h2><blockquote><p>先举个栗子：<br>http形式从服务器拉取1024个大小1kb的文件和单个大小为1M的文件，哪个耗时更短？<br>答：肯定是拉取单个1M的更快。<br><strong>原因就是每个请求之前，http 都需要做许多的准备工作来保证文件能够正常传输。而正是这些额外工作，造成了很多时间和性能开销。</strong>  </p></blockquote><p>而每一次绘制CPU都要调用DrawCall，而在调动DrawCall前，CPU还要进行很多准备工作：检测渲染状态、提交渲染所需要的数据、提交渲染所需要的状态。<br>而GPU本身具有很强大的计算能力，可以很快就处理完渲染任务。一般来说，绘制 100 个三角形和绘制 1000 个三角形所消耗的时间没差多少。<br>但是，当 DrawCall 过多，CPU就会很多额外开销用于准备工作，CPU本身负载，而这时GPU可能闲置了。   </p><blockquote><p><strong> 也就是说，正是因为每次渲染前，CPU 都需要做一系列准备工作，而 CPU 的每一次内存显存读写、数据处理和渲染状态切换都会带来一定的性能和时间消耗，积少成多，而 GPU 大部分时间都在摸鱼。<br>所以才造成了我们认知中的，DrawCall 数量过多导致了卡顿 </strong></p></blockquote><h2 id="如何减少-DrawCall"><a href="#如何减少-DrawCall" class="headerlink" title="如何减少 DrawCall"></a>如何减少 DrawCall</h2><p>如上所说，我们可以通过一次多给 CPU 分配点工作，让一次渲染的内容多一些，减少分配次数，来达到我们的目的。<br>话是这么说，可是我们应该怎么实际操作呢？往下看  </p><h3 id="针对图片资源"><a href="#针对图片资源" class="headerlink" title="针对图片资源"></a>针对图片资源</h3><h4 id="静态合图"><a href="#静态合图" class="headerlink" title="静态合图"></a>静态合图</h4><p>就是讲碎图整合成一张大图，即我们常说的 打图集。<br>但是图集也不是随便打的，并不是一张大图容纳越多的碎图越好。这里面也是有一定的门道的。  </p><blockquote><p><strong>尽量将处于同一界面（UI）下的相邻且渲染状态相同的碎图打包成图集</strong> </p><p>对于Creator来说，在游戏运行时引擎是按照节点层级顺序从上往下由浅到深进行渲染的，理论上 每渲染一张图像（文本最终也是图像）都需要一次 DrawCall。<br>渲染状态是指：纹理状态（预乘、循环模式和过滤模式）或 Material（材质）、Blend（混合模式）等等，所以使用自定义 Shader 也会打断合批</p></blockquote><p>所以 <strong>相邻且渲染状态相同</strong> 是关键点。<br>tip: 不建议任何图片资源的尺寸超过2048*2048，否则可能会出现加载相关的问题。  </p><p>下面介绍2种打图集的方式</p><h5 id="自动图集资源（Auto-Atlas）"><a href="#自动图集资源（Auto-Atlas）" class="headerlink" title="自动图集资源（Auto Atlas）"></a>自动图集资源（Auto Atlas）</h5><p>利用 Cocos Creator 内置的自动图集资源来将碎图打包成图集。<br>在项目构建时，编辑器会将所有自动图集资源所在文件夹下的所有符合要求的图像分别根据配置打包成一个或多个图集。<br>自动图集资源使用起来很灵活，编辑器在打包图集时会自动递归子目录，若子目录下也有自动图集资源（即 .pac 文件）则会跳过该目录，所以我们可以对同一目录下的不同部分的碎图配置不同的参数。  </p><blockquote><p>关于自动图集的几点建议</p><ul><li>合理控制图集最大尺寸，避免单个图像加载时间过长。</li><li>尺寸太大的图像没有必要打进图集（如背景图）。</li><li>善用九宫格（Sliced）可以节省很多空间（这一点需要美术大佬配合）。</li><li>间距保持默认的 2 并保持勾选扩边选项，避免图像裁剪错误和出现黑边的情况。</li><li>勾选不包含未被引用资源选项，自动排除没有用到的图像以节省空间（该选项预览时无效）。</li><li>开发时预览图集，根据结果进行调整，以达到最好的优化效果。</li></ul></blockquote><h5 id="TexturePacker"><a href="#TexturePacker" class="headerlink" title="TexturePacker"></a>TexturePacker</h5><blockquote><p>使用 TexturePacker 打包图集时需要注意配置「形状填充（Shape Padding，对应 Auto Atlas 中的间距）」，避免某张图像出现相邻图像的像素的情况。</p></blockquote><h5 id="对比一下"><a href="#对比一下" class="headerlink" title="对比一下"></a>对比一下</h5><p>Auto Atlas</p><ul><li>Cocos Creator 内置，方便</li><li>功能不多但是该有的都有</li><li>项目构建时才生成图集，开发时任意修改无压力</li><li>图集尺寸在生成时自适应，节省空间</li><li>支持自动纹理压缩  </li></ul><p>TexturePacker  </p><ul><li>第三方软件需自行安装，不够方便</li><li>收费功能很多很专业但是基本用不着，免费功能也够用</li><li>先生成图集再使用，更换图像又要重新生成图集</li><li>尺寸固定需要自己设置</li><li>不支持自动纹理压缩 </li></ul><h4 id="动态合图"><a href="#动态合图" class="headerlink" title="动态合图"></a>动态合图</h4><p>Creator 官方说明：</p><blockquote><p>Cocos Creator 提供了在项目构建时的静态合图方法 —— 「自动合图」（Auto Atlas）。但是当项目日益壮大的时候贴图会变得非常多，很难将贴图打包到一张大贴图中，这时静态合图就比较难以满足降低 DrawCall 的需求。<br>所以 Cocos Creator 在 v2.0 中加入了 「动态合图」（Dynamic Atlas）的功能，它能在项目运行时动态的将贴图合并到一张大贴图中。当渲染一张贴图的时候，动态合图系统会自动检测这张贴图是否已经被合并到了图集（图片集合）中，如果没有，并且此贴图又符合动态合图的条件，就会将此贴图合并到图集中。<br>动态合图官方文档：<br><a href="https://docs.cocos.com/creator/manual/zh/advanced-topics/dynamic-atlas.html" target="_blank" rel="noopener">https://docs.cocos.com/creator/manual/zh/advanced-topics/dynamic-atlas.html</a>  </p></blockquote><p>动态图集有2个限制：  </p><ul><li>动态图集尺寸最大是 2048 * 2048  </li><li>碎图的尺寸默认不能超过 512，可通过 API 进行修改：<code>cc.dynamicAtlasManager.maxFrameSize = 512</code>  </li></ul><p>tips: 启用动态合图会增大内存消耗，不同平台占用内存不一致。小游戏和原生平台默认禁止动态合图。可以通过 api 自行开启：<code>cc.macro.CLEANUP_IMAGE_CACHE = false; cc.dynamicAtlasManager.enabled = true;</code><br><strong><em>还需要保证纹理的 Premulyiply Alpha（预乘）、Wrap Mode（循环模式） 和 Filter Mode（过滤模式） 等信息与动态图集一致才能够动态合批。</em></strong>  </p><p>另外，<strong><em>静态图集也能参与动态合图</em></strong>，只要满足动态合图的要求即可。<br>tip1: 自动图集资源（Auto Atlas）需要在其属性检查器面板中开启 Texture 栏下的 Packable 选项，<strong>该选项默认是禁用的</strong>。<br>tip2: 精灵（Sprite）也是需要开启 Packable 选项才能动态合图。<strong>该选项默认是开启的</strong>。<br>tip3: 如果要使用了 shader ，那么需要禁用该精灵的 Packable 选项。</p><h3 id="针对-Label"><a href="#针对-Label" class="headerlink" title="针对 Label"></a>针对 Label</h3><h4 id="位图字体（BMFont）"><a href="#位图字体（BMFont）" class="headerlink" title="位图字体（BMFont）"></a>位图字体（BMFont）</h4><p>在 Creator 中使用系统字体或 TTF 字体的 Label 会打断渲染合批，特别是 Label 和 Sprite 层叠交错的情况，每一个 Label 都会打断合批增加一个 DrawCall。  </p><blockquote><p>因此建议使用 BMFont 来代替 TTF 或系统字体，并且将 BMFont 与 UI 碎图打包到同一图集中（或「开启动态合图」），可以免除大部分文本导致的 DrawCall增加。  </p></blockquote><h4 id="文本缓存模式（Cache-Mode）"><a href="#文本缓存模式（Cache-Mode）" class="headerlink" title="文本缓存模式（Cache Mode）"></a>文本缓存模式（Cache Mode）</h4><p>Creator 2.0.9 版本在 Label 组件上增加了 Cache Mode 选项，来解决系统字体和 TTF 字体带来的性能问题。<br>CacheMode有三种选项：  </p><ol><li>NONE（默认）<br>每一个 Label 都会生成为一张单独的位图，且不会参与动态合图，所以每一个 Label 都会打断渲染合批</li><li>BITMAP<br>开启 BITMAP 模式后，文本同样会生成为一张位图，但是只要符合动态合图要求就可以参与动态合图，和周围的精灵合并 DrawCall 。<br> <strong>一定要注意 BITMAP 模式只适用于不频繁更改的文本，否则内存会爆炸。</strong>  </li><li><p>CHAR<br>开启 CHAR 模式后，引擎会将该 Label 中出现的所有字符缓存到一张全局共享的位图中，相当于是生成了一个 BMFont 。<br><strong>适用于文本频繁更改的情况，对性能和内存最友好。</strong><br>tip： 该模式 <strong>只能用于字体样式和字号固定，并且不会频繁出现巨量未使用过的字符</strong> 的 Label。因为共享位图的最大尺寸为 2048*2048，占满了之后就没办法再渲染新的字符，需要切换场景才会清除共享位图。  </p><p> 总结：对于大量频繁更改的文本，使用 CHAR 模式带来的性能提升是非常明显的。<br> 同时 CHAR 模式的局限也很明显，一般用于场景中出现大量数字文本，类似于经验值增加、血量减少之类的特效的情况</p></li></ol><h3 id="必经之路–调整UI层级顺序"><a href="#必经之路–调整UI层级顺序" class="headerlink" title="必经之路–调整UI层级顺序"></a>必经之路–调整UI层级顺序</h3><blockquote><p>原则：  </p><ul><li>分离图像节点和文本节点  </li><li>文本使用 BMFont 或 Cache Mode 选项，尽量出现避免文本打断渲染合批的情况  </li><li><font color="red">FBI WARNING:</font> 一个 Mask 组件及其控制的渲染节点，需要至少三次 Draw call。第一次开启模板测试并调用一次 Draw call，刷新模板缓冲。第二次绘制对需要通过模板测试的区域进行设置。第三次再进行实际的子节点内容绘制，绘制结束再关闭模板测试。因此 <strong>使用 Mask 组件就无法与其他相邻节点进行批次处理</strong> ，但是 Mask 组件内部的连续节点在满足合并规则的情况下还是会进行合批。</li></ul></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>改变渲染状态会打断渲染合批，例如改变纹理状态（预乘、循环模式和过滤模式）或改变 Material（材质）、Blend（混合模式）等等，所以使用自定义 Shader 也会打断合批。</li><li>图集默认不参与动态合图，手动开启自动图集资源的 Packable 选项后如果最终图集符合动态合图要求也可以参与动态合图。</li><li>纹理开启 Packable 选项参与动态合图后无法使用自定义 Shader，因为动态合图会修改原始贴图的 UV 坐标。</li><li>使用 Cache Mode 的 BITMAP 模式需要注意内存情况，CHAR 模式需要注意文本内容不宜过多。</li><li>在 <strong><em>Cocos Creator 2.0.7 之前的版本</em></strong>中，改变节点的颜色或透明度、Sprite 组件使用九宫格（Sliced）都会打断渲染合批</li></ul><p>以上内容整理自 CocosCreator 官方文档，<a href="https://docs.cocos.com/creator/manual/zh/" target="_blank" rel="noopener">点击这里查看</a></p>]]></content>
    
    <summary type="html">
    
      介绍什么是 DrawCall，为什么要减少 DrawCall 以及在 Cocos Creator 项目中如何减少 DrawCall 来提升游戏性能。
    
    </summary>
    
    
      <category term="CocosCreator" scheme="http://blog.92yu.win/tags/CocosCreator/"/>
    
  </entry>
  
  <entry>
    <title>extends和implement的区别</title>
    <link href="http://blog.92yu.win/2019/12/18/extends%E5%92%8Cimplement%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.92yu.win/2019/12/18/extends和implement的区别/</id>
    <published>2019-12-18T15:06:01.000Z</published>
    <updated>2021-07-04T07:46:32.240Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</strong></p></blockquote><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习pureMVC，发现其中不少类继承的时候会写成形如<code>export default class AppFacade extends puremvc.Facade implements puremvc.IFacade {...}</code>的样子；最初我的理解中，<code>extends</code>和<code>implement</code>都是继承的意思，但是又一想，都是继承完全可以写成<code>export default class AppFacade extends puremvc.Facade puremvc.IFacade {...}</code><br>那么问题来了，extends和implement的区别是什么呢？</p><hr><h1 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h1><p>假如我有一个干净的抽象类A<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract class A &#123;</span><br><span class="line">    abstract m(): void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在继承(extends)方面，就像C#或者java里面那样，我可以像下面这样来继承这个抽象类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//TypeScript</span><br><span class="line">class B extends A&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是在实现方面（implement），在TypeScript中也可以去implement一个类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class C implements A &#123;</span><br><span class="line">    m(): void &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么问题来了：类B和类C在行为上有什么不同？我该如何选择？</p><hr><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><p>implements关键字将类A当作一个接口，这意味着类C必须去实现定义在A中的所有方法，无论这些方法是否在类A中有没有默认的实现。同时，也不用在类C中定义super方法。<br>而就像是extends关键字本身所表达的意思一样，你只需要实现类A中定义的虚方法，并且关于super的调用也会有效。<br>我想在抽象方法的情况下，这并没有什么区别。但是很少有只使用抽象方法的类，如果只使用抽象方法，最好将其转换为接口。  </p><blockquote><p>回到前言中的例子，Facade是一个基类，IFacade是基于Facade扩展出来的一个接口类，那么此时AppFacade具有Facade的属性，同时又必须实现IFacade中定义的方法。</p></blockquote><center> —end— </center>]]></content>
    
    <summary type="html">
    
      在ts语言中，一个类既可以被extends，也可以被implement。但是在JAVA/C#语言中，只有接口才能被implement，而只有类才能被extends。那么在ts语言中，这两个关键词有什么不同呢？
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.92yu.win/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="http://blog.92yu.win/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>让Git像SVN那样按照文件夹更新的Git SubModule</title>
    <link href="http://blog.92yu.win/2019/06/26/%E8%AE%A9Git%E5%83%8FSVN%E9%82%A3%E6%A0%B7%E6%8C%89%E7%85%A7%E6%96%87%E4%BB%B6%E5%A4%B9%E6%9B%B4%E6%96%B0%E7%9A%84Git-SubModule/"/>
    <id>http://blog.92yu.win/2019/06/26/让Git像SVN那样按照文件夹更新的Git-SubModule/</id>
    <published>2019-06-26T15:11:14.000Z</published>
    <updated>2021-07-04T07:46:32.241Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</strong></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近项目出现了新的需求，需要在一个Creator框架工程中，集成多个子游戏。<br><strong>优点</strong>：所有游戏集中管理，避免出现一旦框架更改，所有子游戏工程需要全部改一遍<br><strong>痛点</strong>：如果子游戏数量过多，会导致项目工程巨大，打开编译等速度过慢<br><strong>目的</strong>：框架自身和各子游戏需要能够独立更新，互不影响  </p><blockquote><p>引用一段《Git权威指南》的话：<br>项目的版本库在某些情况虾需要引用其他版本库中的文件，例如公司积累了一套常用的函数库，被多个项目调用，显然这个函数库的代码不能直接放到某个项目的代码中，而是要独立为一个代码库，那么其他项目要调用公共函数库该如何处理呢？分别把公共函数库的文件拷贝到各自的项目中会造成冗余，丢弃了公共函数库的维护历史，这显然不是好的方法。  </p></blockquote><p><em>Git Submodule功能刚刚开始学习可能觉得有点怪异，所以本文会把每一步的操作的命令和结果都用代码的形式展现给大家，以便更好的理解。</em></p><h2 id="1-学习Git-SubModule"><a href="#1-学习Git-SubModule" class="headerlink" title="1. 学习Git SubModule"></a>1. 学习Git SubModule</h2><p><strong><em>说明：本例采用两个项目以及两个公共类库演示对submodule的操作。</em></strong></p><h3 id="1-1-创建Git-SubModule示例项目"><a href="#1-1-创建Git-SubModule示例项目" class="headerlink" title="1.1 创建Git SubModule示例项目"></a>1.1 创建Git SubModule示例项目</h3><h4 id="1-1-1-准备环境"><a href="#1-1-1-准备环境" class="headerlink" title="1.1.1 准备环境"></a>1.1.1 准备环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop</span><br><span class="line">λ mkdir repo</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop</span><br><span class="line">λ cd repo\</span><br></pre></td></tr></table></figure><p>创建本地仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\repo</span><br><span class="line">λ git --git-dir=lib1.git init --bare</span><br><span class="line">Initialized empty Git repository in C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\repo</span><br><span class="line">λ git --git-dir=lib2.git init --bare</span><br><span class="line">Initialized empty Git repository in C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\repo</span><br><span class="line">λ git --git-dir=project1.git init --bare</span><br><span class="line">Initialized empty Git repository in C:/Users/TAL-YINGYU/Desktop/repo/project1.git/</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\repo</span><br><span class="line">λ git --git-dir=project2.git init --bare</span><br><span class="line">Initialized empty Git repository in C:/Users/TAL-YINGYU/Desktop/repo/project2.git/</span><br></pre></td></tr></table></figure></p><p>初始化工作区：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop</span><br><span class="line">λ mkdir workSpaceLocal</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop</span><br><span class="line">λ cd workSpaceLocal\</span><br></pre></td></tr></table></figure></p><h4 id="1-1-2-初始化项目"><a href="#1-1-2-初始化项目" class="headerlink" title="1.1.2 初始化项目"></a>1.1.2 初始化项目</h4><p>初始化project1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ git clone ..\repo\project</span><br><span class="line">project1.git\  project2.git\</span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ git clone ..\repo\project1.git\</span><br><span class="line">Cloning into &apos;project1&apos;...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">done.</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ cd project1\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ echo &quot;project1&quot; &gt; project1-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ ls</span><br><span class="line">project1-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git add project1-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;init project1&quot;</span><br><span class="line">[master (root-commit) 89fcc18] init project1</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 project1-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git push origin master</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 227 bytes | 227.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project1.git\</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure></p><p>初始化project2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ git clone ..\repo\project2.git\</span><br><span class="line">Cloning into &apos;project2&apos;...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">done.</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ cd project2\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ echo &quot;project2&quot; &gt; project2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ ls</span><br><span class="line">project2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git add project2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;init project2&quot;</span><br><span class="line">[master (root-commit) fdefcbe] init project2</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 project2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git push origin master</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 229 bytes | 229.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project2.git\</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure></p><h4 id="1-1-3-初始化公共类库"><a href="#1-1-3-初始化公共类库" class="headerlink" title="1.1.3 初始化公共类库"></a>1.1.3 初始化公共类库</h4><p>初始化lib1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ git clone ..\repo\lib1.git\</span><br><span class="line">Cloning into &apos;lib1&apos;...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">done.</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ cd lib1\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib1 (master -&gt; origin)</span><br><span class="line">λ echo &quot;I&apos;m lib1.&quot; &gt; lib1-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib1 (master -&gt; origin)</span><br><span class="line">λ git add lib1-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib1 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;init lib1&quot;</span><br><span class="line">[master (root-commit) 1ffa3a9] init lib1</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 lib1-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib1 (master -&gt; origin)</span><br><span class="line">λ git push origin master</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 222 bytes | 222.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\lib1.git\</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure></p><p>初始化lib2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib1 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ git clone ..\repo\lib2.git\</span><br><span class="line">Cloning into &apos;lib2&apos;...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">done.</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ cd lib2\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib2 (master -&gt; origin)</span><br><span class="line">λ echo &quot;I&apos;m lib 2&quot; &gt; lib2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib2 (master -&gt; origin)</span><br><span class="line">λ git add lib2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib2 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;init lib2&quot;</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib2 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;init lib2&quot;</span><br><span class="line">[master (root-commit) 1f05672] init lib2</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 lib2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib2 (master -&gt; origin)</span><br><span class="line">λ git push origin master</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 222 bytes | 222.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\lib2.git\</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure></p><h3 id="1-2-为主项目添加SubModules"><a href="#1-2-为主项目添加SubModules" class="headerlink" title="1.2 为主项目添加SubModules"></a>1.2 为主项目添加SubModules</h3><h4 id="1-2-1-为project1添加lib1和lib2"><a href="#1-2-1-为project1添加lib1和lib2" class="headerlink" title="1.2.1 为project1添加lib1和lib2"></a>1.2.1 为project1添加lib1和lib2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\lib2 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ cd project1\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git submodule add C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/</span><br><span class="line">Cloning into &apos;C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/project1/lib1&apos;...</span><br><span class="line">done.</span><br><span class="line">warning: LF will be replaced by CRLF in .gitmodules.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git submodule add C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/</span><br><span class="line">Cloning into &apos;C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/project1/lib2&apos;...</span><br><span class="line">done.</span><br><span class="line">warning: LF will be replaced by CRLF in .gitmodules.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ ls</span><br><span class="line">lib1/  lib2/  project1-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   .gitmodules</span><br><span class="line">        new file:   lib1</span><br><span class="line">        new file:   lib2</span><br><span class="line"></span><br><span class="line">#看一看公共类库内容是不是刚才我们初始化的</span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cat lib1\</span><br><span class="line">.git           lib1-infos.md</span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cat lib1\lib1-infos.md</span><br><span class="line">&quot;I&apos;m lib1.&quot;</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cat lib2\lib2-infos.md</span><br><span class="line">&quot;I&apos;m lib 2&quot;</span><br></pre></td></tr></table></figure><p>到目前为止，我们已经使用<code>git submodule add</code>命令为<strong>project1</strong>添加了两个公共类库，通过查看当前状态发现添加了一个新的文件（.gitmodules）和两个问题件夹（lib1， lib2），那么.gitmodules文件是做什么用的呢？我们来看一下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cat .gitmodules</span><br><span class="line">[submodule &quot;lib1&quot;]</span><br><span class="line">        path = lib1</span><br><span class="line">        url = C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/</span><br><span class="line">[submodule &quot;lib2&quot;]</span><br><span class="line">        path = lib2</span><br><span class="line">        url = C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/</span><br></pre></td></tr></table></figure></p><p>原来这里面存储的都是每个submodule的相关信息，知道在当前项目的位置以及远程仓库地址<br>ok，现在我们把project1的更改提交到远程仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;add submodules[lib1,lib2] to project1&quot;</span><br><span class="line">[master b0389b8] add submodules[lib1,lib2] to project1</span><br><span class="line"> 3 files changed, 8 insertions(+)</span><br><span class="line"> create mode 100644 .gitmodules</span><br><span class="line"> create mode 160000 lib1</span><br><span class="line"> create mode 160000 lib2</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git push</span><br><span class="line">Enumerating objects: 4, done.</span><br><span class="line">Counting objects: 100% (4/4), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 449 bytes | 449.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project1.git\</span><br><span class="line">   89fcc18..b0389b8  master -&gt; master</span><br></pre></td></tr></table></figure></p><p><strong><em>那么问题来了，如果一个项目中已经引入了公共类库，项目组其他成员如何clone这个项目呢？</em></strong></p><h3 id="1-3-模拟clone带有submodule的仓库"><a href="#1-3-模拟clone带有submodule的仓库" class="headerlink" title="1.3 模拟clone带有submodule的仓库"></a>1.3 模拟clone带有submodule的仓库</h3><p>模拟组员m：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ git clone ..\repo\project1.git project1-b</span><br><span class="line">Cloning into &apos;project1-b&apos;...</span><br><span class="line">done.</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ ls</span><br><span class="line">lib1/  lib2/  project1/  project1-b/  project2/</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal</span><br><span class="line">λ cd project1-b\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git submodule</span><br><span class="line">-1ffa3a92c147a2d09fadbc5129389cc6fd1b95cb lib1</span><br><span class="line">-1f05672f7ff92395fcbbe325ab2cda7405da40e8 lib2</span><br></pre></td></tr></table></figure></p><p>可以看得出submodule的状态是hash码和文件目录，但是前面有一个 - 号，这表示这个子模块还没有被检出<br>ok，我们检出project1-b的submodule<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git submodule init</span><br><span class="line">Submodule &apos;lib1&apos; (C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/) registered for path &apos;lib1&apos;</span><br><span class="line">Submodule &apos;lib2&apos; (C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/) registered for path &apos;lib2&apos;</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git submodule update</span><br><span class="line">Cloning into &apos;C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/project1-b/lib1&apos;...</span><br><span class="line">done.</span><br><span class="line">Cloning into &apos;C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/project1-b/lib2&apos;...</span><br><span class="line">done.</span><br><span class="line">Submodule path &apos;lib1&apos;: checked out &apos;1ffa3a92c147a2d09fadbc5129389cc6fd1b95cb&apos;</span><br><span class="line">Submodule path &apos;lib2&apos;: checked out &apos;1f05672f7ff92395fcbbe325ab2cda7405da40e8&apos;</span><br></pre></td></tr></table></figure></p><p>我们来看下<code>.git/config</code>文件的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ cat .git/config</span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = false</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        symlinks = false</span><br><span class="line">        ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\\repo\\project1.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/master</span><br><span class="line">[submodule &quot;lib1&quot;]</span><br><span class="line">        active = true</span><br><span class="line">        url = C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/</span><br><span class="line">[submodule &quot;lib2&quot;]</span><br><span class="line">        active = true</span><br><span class="line">        url = C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/</span><br></pre></td></tr></table></figure></p><p>可以看到里面有最新的submodule信息<br>我们来验证下本地项目中公共类库是否存在：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ cat lib1\lib1-infos.md lib2\lib2-infos.md</span><br><span class="line">&quot;I&apos;m lib1.&quot;</span><br><span class="line">&quot;I&apos;m lib 2&quot;</span><br></pre></td></tr></table></figure></p><h3 id="1-4-修改submodule"><a href="#1-4-修改submodule" class="headerlink" title="1.4 修改submodule"></a>1.4 修改submodule</h3><p>继续模拟组员m修改submodule的内容<br>先看下当前submodule的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ cd lib1\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b\lib1 (HEAD detached at 1ffa3a9 -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">HEAD detached at 1ffa3a9</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></p><blockquote><p>这个时候HEAD直接指向一个commit，Git会警告我们出现了所谓的detached HEAD现象。表示当前git状态不属于任何一个分支。  </p></blockquote><p>那么为什么会出现这个情况呢？ 继续往下看：<br>git对于submodule有特殊的处理方式，在一个主项目中引入submoudle的时候，其实git做了3件事：</p><ul><li>记录引用的仓库</li><li>记录主项目中submodule的目录位置</li><li>记录引用submodule的 <strong>commit id</strong>  </li></ul><p>在project1中push了之后，其实就是执行了更新引用的commit id，然后project1-b在clone的时候获取到了submodule的commit id，然后执行git submodule update的时候，git就根据gitlink获取submodule的commit id，最后获取submodule的文件，所以clone之后不在任何分支上，但是master分支的commit id和HEAD保持一致。  </p><p>现在我们要先切换到master分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b\lib1 (HEAD detached at 1ffa3a9 -&gt; origin)</span><br><span class="line">λ git checkout master</span><br><span class="line">Previous HEAD position was 1ffa3a9 init lib1</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br></pre></td></tr></table></figure></p><p>组员m修改lib1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b\lib1 (master -&gt; origin)</span><br><span class="line">λ cat lib1-infos.md</span><br><span class="line">&quot;I&apos;m lib1.&quot;</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b\lib1 (master -&gt; origin)</span><br><span class="line">λ echo &quot;modified by developer m&quot; &gt; lib1-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b\lib1 (master -&gt; origin)</span><br><span class="line">λ cat lib1-infos.md</span><br><span class="line">&quot;modified by developer m&quot;</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b\lib1 (master -&gt; origin)</span><br><span class="line">λ git commit -a -m &quot;modify lib1-infos.md by developer m&quot;</span><br><span class="line">[master f220249] modify lib1-infos.md by developer m</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure></p><p>在主项目中将刚刚修改的submodule提交会稍微繁琐一些。<br>在push之前，我们先看看project1-b的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b\lib1 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   lib1 (new commits)</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></p><p>lib1(new commits)表示lib1有新的提交，这个比较特殊。<br>再看看project1-b主项目的变化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git diff</span><br><span class="line">diff --git a/lib1 b/lib1</span><br><span class="line">index 1ffa3a9..f220249 160000</span><br><span class="line">--- a/lib1</span><br><span class="line">+++ b/lib1</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Subproject commit 1ffa3a92c147a2d09fadbc5129389cc6fd1b95cb</span><br><span class="line">+Subproject commit f220249eb39266a4fdc8e46a1164613a953ac3a4</span><br></pre></td></tr></table></figure></p><p>从diff的结果可以看出，lib1的commit id从原来的<strong>1ffa3a92c147a2d09fadbc5129389cc6fd1b95cb</strong>更新为<strong>f220249eb39266a4fdc8e46a1164613a953ac3a4</strong>  </p><p><strong><em>注意：</em></strong> 这个时候，如果我们执行了<code>git submodule update</code>操作，那么lib1会还原到<strong>1ffa3a92c147a2d09fadbc5129389cc6fd1b95cb</strong>  </p><p>这样的话，我们刚刚的修改是不是就丢失了呢？<br>其实并不会，因为刚刚我们已经提交到了master分支，只需要再执行<code>git checkout master</code>就可以了  </p><p>现在我们把lib1的修改提交到仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ cd lib1\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b\lib1 (master -&gt; origin)</span><br><span class="line">λ git push</span><br><span class="line">Enumerating objects: 5, done.</span><br><span class="line">Counting objects: 100% (5/5), done.</span><br><span class="line">Writing objects: 100% (3/3), 291 bytes | 291.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/</span><br><span class="line">   dd43aec..f220249  master -&gt; master</span><br></pre></td></tr></table></figure></p><p>千万不要以为到这里就结束了，后面还有很重要的一步,提交project1-b引用的submodule的commit id：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git add .</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;update lib1 to lastest commit id&quot;</span><br><span class="line">[master 3a6818e] update lib1 to lastest commit id</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git push</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 253 bytes | 253.00 KiB/s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project1.git</span><br><span class="line">   b0389b8..3a6818e  master -&gt; master</span><br></pre></td></tr></table></figure></p><p>OK，现在大功告成，我们已经成功的在项目project1-b中修改了公共仓库lib1，并且把最新的lib1的commit id提交到了仓库。  </p><p>接下来我们来看看project1怎么获取submodule。</p><h3 id="1-5-更新主项目的submodule"><a href="#1-5-更新主项目的submodule" class="headerlink" title="1.5 更新主项目的submodule"></a>1.5 更新主项目的submodule</h3><p>首先进入project1的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ cd ..\project1\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git pull</span><br><span class="line">remote: Enumerating objects: 3, done.</span><br><span class="line">remote: Counting objects: 100% (3/3), done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (2/2), done.</span><br><span class="line">From C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project1.git\</span><br><span class="line">   b0389b8..3a6818e  master     -&gt; origin/master</span><br><span class="line">Fetching submodule lib1</span><br><span class="line">From C:/Users/TAL-YINGYU/Desktop/repo/lib1</span><br><span class="line">   1ffa3a9..f220249  master     -&gt; origin/master</span><br><span class="line">Updating b0389b8..3a6818e</span><br><span class="line">Fast-forward</span><br><span class="line"> lib1 | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   lib1 (new commits)</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></p><p>可以看出，我运行了<code>git pull</code>和<code>git status</code>获取了远程仓库最新的源码，并且看到本地的状态为modified，这是为什么呢？<br>我们来比较一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git diff</span><br><span class="line">diff --git a/lib1 b/lib1</span><br><span class="line">index f220249..1ffa3a9 160000</span><br><span class="line">--- a/lib1</span><br><span class="line">+++ b/lib1</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Subproject commit f220249eb39266a4fdc8e46a1164613a953ac3a4</span><br><span class="line">+Subproject commit 1ffa3a92c147a2d09fadbc5129389cc6fd1b95cb</span><br></pre></td></tr></table></figure></p><p>从比较结果来看，是因为submodule的commit id更改了，我们前面提到，主项目更新submodule的内容时，首先要提交submodule的内容，然后再更新主项目中引用的submodule的commit id。<br>现在我们看到的不同，就是因为刚才更改了project1-b的submodule commit id。<br>ok，我们来更新一下project1的submodules：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git submodule update</span><br><span class="line">Submodule path &apos;lib1&apos;: checked out &apos;f220249eb39266a4fdc8e46a1164613a953ac3a4&apos;</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></p><h3 id="1-6-为project2添加submodules-lib1和lib2"><a href="#1-6-为project2添加submodules-lib1和lib2" class="headerlink" title="1.6 为project2添加submodules lib1和lib2"></a>1.6 为project2添加submodules lib1和lib2</h3><p>话不多说，直接上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cd ..\project2\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git submodule add C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/</span><br><span class="line">Cloning into &apos;C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/project2/lib1&apos;...</span><br><span class="line">done.</span><br><span class="line">warning: LF will be replaced by CRLF in .gitmodules.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git submodule add C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/</span><br><span class="line">Cloning into &apos;C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/project2/lib2&apos;...</span><br><span class="line">done.</span><br><span class="line">warning: LF will be replaced by CRLF in .gitmodules.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ ls</span><br><span class="line">lib1/  lib2/  project2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git submodule init</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   .gitmodules</span><br><span class="line">        new file:   lib1</span><br><span class="line">        new file:   lib2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git commit -a -m &quot;add submodules(lib1 and lib2)&quot;</span><br><span class="line">[master 12516ae] add submodules(lib1 and lib2)</span><br><span class="line"> 3 files changed, 8 insertions(+)</span><br><span class="line"> create mode 100644 .gitmodules</span><br><span class="line"> create mode 160000 lib1</span><br><span class="line"> create mode 160000 lib2</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git push</span><br><span class="line">Enumerating objects: 4, done.</span><br><span class="line">Counting objects: 100% (4/4), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 440 bytes | 440.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project2.git\</span><br><span class="line">   fdefcbe..12516ae  master -&gt; master</span><br></pre></td></tr></table></figure></p><p>相信上面的代码都很熟悉了，就不过多展开了。</p><h3 id="1-7-修改lib1和lib2并同步到project1和project2"><a href="#1-7-修改lib1和lib2并同步到project1和project2" class="headerlink" title="1.7 修改lib1和lib2并同步到project1和project2"></a>1.7 修改lib1和lib2并同步到project1和project2</h3><blockquote><p>我们假如，组员n同时负责peoject1和project2，有可能出现peoject1的某个时候发现lib1或者lib2有个bug，并且这个bug可能会影响很多需求模块，那么我们应该怎么办呢？  </p></blockquote><p>现在假设需求如下：</p><ul><li>在lib1中添加一个文件，README，用来描述lib</li><li>在lib2中的lib2-infos.md添加以下描述语句：“学习git submodule的修改，同步功能”  </li></ul><h4 id="1-7-1-在lib1中添加一个文件"><a href="#1-7-1-在lib1中添加一个文件" class="headerlink" title="1.7.1 在lib1中添加一个文件"></a>1.7.1 在lib1中添加一个文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ cd lib1\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib1 (master -&gt; origin)</span><br><span class="line">λ echo &quot;lib1 README&quot; &gt; README</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib1 (master -&gt; origin)</span><br><span class="line">λ ls</span><br><span class="line">lib1-infos.md  README</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib1 (master -&gt; origin)</span><br><span class="line">λ git add README</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib1 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;add file README&quot;</span><br><span class="line">[master 139f263] add file README</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib1 (master -&gt; origin)</span><br><span class="line">λ git push</span><br><span class="line">Enumerating objects: 4, done.</span><br><span class="line">Counting objects: 100% (4/4), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 297 bytes | 297.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/</span><br><span class="line">   f220249..139f263  master -&gt; master</span><br></pre></td></tr></table></figure><p>前面的文章提到，这个时候我们只完成了第一步，还有很重要的更新lib1的commit id 一步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib1 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   lib1 (new commits)</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git add lib1</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;update lib1 to lastest commit id&quot;</span><br><span class="line">[master a29cc13] update lib1 to lastest commit id</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"> </span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git push</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 251 bytes | 251.00 KiB/s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project2.git\</span><br><span class="line">   12516ae..a29cc13  master -&gt; master</span><br></pre></td></tr></table></figure></p><h4 id="1-7-2-在lib2的lib2-infos添加内容"><a href="#1-7-2-在lib2的lib2-infos添加内容" class="headerlink" title="1.7.2 在lib2的lib2-infos添加内容"></a>1.7.2 在lib2的lib2-infos添加内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ cd lib2</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib2 (master -&gt; origin)</span><br><span class="line">λ echo &quot;学习git submodule的修改，同步功能&quot; &gt;&gt; lib2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib2 (master -&gt; origin)</span><br><span class="line">λ git add lib2-infos.md</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib2 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;add descript sentence&quot;</span><br><span class="line">[master 5d24031] add descript sentence</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib2 (master -&gt; origin)</span><br><span class="line">λ git push</span><br><span class="line">Enumerating objects: 5, done.</span><br><span class="line">Counting objects: 100% (5/5), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 307 bytes | 307.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/</span><br><span class="line">   1f05672..5d24031  master -&gt; master</span><br><span class="line">   </span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2\lib2 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   lib2 (new commits)</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git add lib2</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git commit -m &quot;update lib2 to lastest commit id&quot;</span><br><span class="line">[master 1f0f0f4] update lib2 to lastest commit id</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git push</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 253 bytes | 253.00 KiB/s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project2.git\</span><br><span class="line">   a29cc13..1f0f0f4  master -&gt; master</span><br></pre></td></tr></table></figure><h3 id="1-8-在project1中同步peoject2的lib1和lib2的修改"><a href="#1-8-在project1中同步peoject2的lib1和lib2的修改" class="headerlink" title="1.8 在project1中同步peoject2的lib1和lib2的修改"></a>1.8 在project1中同步peoject2的lib1和lib2的修改</h3><p>现在project2里lib1和lib2的更改已经提交了，我们来更新project1的submodules（实际情况可能会有很多项目需要更新）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ cd ..\project1</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git pull</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure></p><p>什么情况？？？明明在project2中lib1和lib2已经更新了呀！为什么project1执行<code>git pull</code>得不到任何改动呢？</p><p>我们来分析一下，首先来看下project1和project2的submodule状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#project1</span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git submodule</span><br><span class="line"> f220249eb39266a4fdc8e46a1164613a953ac3a4 lib1 (remotes/origin/HEAD)</span><br><span class="line"> 1f05672f7ff92395fcbbe325ab2cda7405da40e8 lib2 (heads/master)</span><br><span class="line"> </span><br><span class="line">#project2</span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project2 (master -&gt; origin)</span><br><span class="line">λ git submodule</span><br><span class="line"> 139f263f4c444d140d3ca3efe7d949f4b2a5b77b lib1 (heads/master)</span><br><span class="line"> 5d2403124046f72b364b0355717013c8221d1fbd lib2 (heads/master)</span><br></pre></td></tr></table></figure></p><p>区别：</p><ul><li>commit id 各不相同</li><li>lib1 所处的分支不相同</li></ul><h4 id="1-8-1-更新project1的lib1和lib2"><a href="#1-8-1-更新project1的lib1和lib2" class="headerlink" title="1.8.1 更新project1的lib1和lib2"></a>1.8.1 更新project1的lib1和lib2</h4><p>还记得刚才在project2中修改的时候，我们都是在master分支上操作的，那么目前project1中的lib1不在任何分支，所以我们先切换到master分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cd lib1</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1\lib1 (HEAD detached at f220249 -&gt; origin)</span><br><span class="line">λ git checkout master</span><br><span class="line">Previous HEAD position was f220249 modify lib1-infos.md by developer m</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">Your branch is behind &apos;origin/master&apos; by 2 commits, and can be fast-forwarded.</span><br><span class="line">  (use &quot;git pull&quot; to update your local branch)</span><br></pre></td></tr></table></figure></p><p>果然切换分支就发现了我们当前已经落后了两个commit( <em>我们刚刚在project2中push了 2 次</em> )了!<br>那么还等什么？赶紧更新啊<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1\lib1 (master -&gt; origin)</span><br><span class="line">λ git pull</span><br><span class="line">remote: Enumerating objects: 4, done.</span><br><span class="line">remote: Counting objects: 100% (4/4), done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From C:/Users/TAL-YINGYU/Desktop/repo/lib1</span><br><span class="line">   f220249..139f263  master     -&gt; origin/master</span><br><span class="line">Updating 1ffa3a9..139f263</span><br><span class="line">Fast-forward</span><br><span class="line"> README        | 1 +</span><br><span class="line"> lib1-infos.md | 2 +-</span><br><span class="line"> 2 files changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 README</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1\lib1 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   lib1 (new commits)</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git diff</span><br><span class="line">diff --git a/lib1 b/lib1</span><br><span class="line">index f220249..139f263 160000</span><br><span class="line">--- a/lib1</span><br><span class="line">+++ b/lib1</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Subproject commit f220249eb39266a4fdc8e46a1164613a953ac3a4</span><br><span class="line">+Subproject commit 139f263f4c444d140d3ca3efe7d949f4b2a5b77b</span><br></pre></td></tr></table></figure></p><p>ok，可以看得出lib1的commit id已经随着pull的操作和project2目前的状态一致，说明已经同步到了。<br>那么我们用同样的办法更新lib2吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cd lib2\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1\lib2 (master -&gt; origin)</span><br><span class="line">λ git pull</span><br><span class="line">remote: Enumerating objects: 5, done.</span><br><span class="line">remote: Counting objects: 100% (5/5), done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From C:/Users/TAL-YINGYU/Desktop/repo/lib2</span><br><span class="line">   1f05672..5d24031  master     -&gt; origin/master</span><br><span class="line">Updating 1f05672..5d24031</span><br><span class="line">Fast-forward</span><br><span class="line"> lib2-infos.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure></p><h4 id="1-8-2-更新project1中的submodule引用"><a href="#1-8-2-更新project1中的submodule引用" class="headerlink" title="1.8.2 更新project1中的submodule引用"></a>1.8.2 更新project1中的submodule引用</h4><p>在1.7.1中，我们更新了project1中lib1和lib2的最新版本，现在要把最新的commit id 保存在project1中，以保持最新的引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1\lib2 (master -&gt; origin)</span><br><span class="line">λ cd ..</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   lib1 (new commits)</span><br><span class="line">        modified:   lib2 (new commits)</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git commit -a -m &quot;update lib1 and lib2 commit id to lastest version&quot;</span><br><span class="line">[master b5208b3] update lib</span><br><span class="line"> 2 files changed, 2 insertions(+), 2 deletions(-)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ git push</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 326 bytes | 326.00 KiB/s, done.</span><br><span class="line">Total 2 (delta 0), reused 0 (delta 0)</span><br><span class="line">To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project1.git\</span><br><span class="line">   3a6818e..b5208b3  master -&gt; master</span><br></pre></td></tr></table></figure></p><h3 id="1-9-使用脚本更新project1-b项目的submodules"><a href="#1-9-使用脚本更新project1-b项目的submodules" class="headerlink" title="1.9 使用脚本更新project1-b项目的submodules"></a>1.9 使用脚本更新project1-b项目的submodules</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1 (master -&gt; origin)</span><br><span class="line">λ cd C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b\</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git pull</span><br><span class="line">remote: Enumerating objects: 3, done.</span><br><span class="line">remote: Counting objects: 100% (3/3), done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 2 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (2/2), done.</span><br><span class="line">From C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project1</span><br><span class="line">   3a6818e..b5208b3  master     -&gt; origin/master</span><br><span class="line">Fetching submodule lib1</span><br><span class="line">From C:/Users/TAL-YINGYU/Desktop/repo/lib1</span><br><span class="line">   f220249..139f263  master     -&gt; origin/master</span><br><span class="line">Fetching submodule lib2</span><br><span class="line">From C:/Users/TAL-YINGYU/Desktop/repo/lib2</span><br><span class="line">   1f05672..5d24031  master     -&gt; origin/master</span><br><span class="line">Updating 3a6818e..b5208b3</span><br><span class="line">Fast-forward</span><br><span class="line"> lib1 | 2 +-</span><br><span class="line"> lib2 | 2 +-</span><br><span class="line"> 2 files changed, 2 insertions(+), 2 deletions(-)</span><br><span class="line"></span><br><span class="line">C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)</span><br><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   lib1 (new commits)</span><br><span class="line">        modified:   lib2 (new commits)</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>可以看到，git判断出lib1和lib2有更新，这就是根据submodule的commit id引用  </p><h4 id="1-9-1-思考"><a href="#1-9-1-思考" class="headerlink" title="1.9.1 思考"></a>1.9.1 思考</h4><p>那么现在我们怎么更新呢？难道还像刚才一样按照子模块一个一个的<code>git checkout master</code>，然后<code>git pull</code>？  </p><p>这里只有两个子模块，如果多了呢？</p><p>实际上有一个更简便的命令可以替代上述操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach git pull</span><br></pre></td></tr></table></figure></p><blockquote><p>循环<code>.gitsubmodules</code>文件里子模块的路径，依次进行子模块更新  </p></blockquote><p>同理我们可以模仿上述命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach ls -l</span><br><span class="line">``` </span><br><span class="line">可以列出每个子模块的文件列表</span><br></pre></td></tr></table></figure></p><p>git submodule foreach git checkout master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">每个子模块切换到master</span><br><span class="line"></span><br><span class="line">#### 1.9.2 实践</span><br><span class="line">先后执行下面两条语句即可  </span><br><span class="line">切换到master</span><br></pre></td></tr></table></figure></p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)<br>λ git submodule foreach git checkout master<br>Entering ‘lib1’<br>Switched to branch ‘master’<br>Your branch is behind ‘origin/master’ by 1 commit, and can be fast-forwarded.<br>  (use “git pull” to update your local branch)<br>Entering ‘lib2’<br>Switched to branch ‘master’<br>Your branch is behind ‘origin/master’ by 1 commit, and can be fast-forwarded.<br>  (use “git pull” to update your local branch)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">拉取</span><br></pre></td></tr></table></figure></p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-b (master -&gt; origin)<br>λ git submodule foreach git pull<br>Entering ‘lib1’<br>Updating f220249..139f263<br>Fast-forward<br> README | 1 +<br> 1 file changed, 1 insertion(+)<br> create mode 100644 README<br>Entering ‘lib2’<br>Updating 1f05672..5d24031<br>Fast-forward<br> lib2-infos.md | 1 +<br> 1 file changed, 1 insertion(+)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 1.10 新员工入职，克隆带有submodule的项目</span><br></pre></td></tr></table></figure></p><p>git clone /path/to/repo/xxx.git<br>git submodule init<br>git submodule update<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这时候新员工心里肯定嘀咕：这是什么操作？？这么麻烦！！  </span><br><span class="line">  </span><br><span class="line">我们可以一行代码搞定</span><br></pre></td></tr></table></figure></p><p>git clone –recursive /path/to/repo/xxx.git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解释一下：  </span><br><span class="line">`--recursive`:可以在clone项目的同时clone关联的submodules</span><br><span class="line"></span><br><span class="line">#### 1.10.1 一键clone project2</span><br></pre></td></tr></table></figure></p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal<br>λ git clone –recursive ..\repo\project2.git\ prject2-auto-clone-submodules<br>Cloning into ‘prject2-auto-clone-submodules’…<br>done.<br>Submodule ‘lib1’ (C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/) registered for path ‘lib1’<br>Submodule ‘lib2’ (C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/) registered for path ‘lib2’<br>Cloning into ‘C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/prject2-auto-clone-submodules/lib1’…<br>done.<br>Cloning into ‘C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/prject2-auto-clone-submodules/lib2’…<br>done.<br>Submodule path ‘lib1’: checked out ‘139f263f4c444d140d3ca3efe7d949f4b2a5b77b’<br>Submodule path ‘lib2’: checked out ‘5d2403124046f72b364b0355717013c8221d1fbd’</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal<br>λ ls<br>lib1/  lib2/  prject2-auto-clone-submodules/  project1/  project1-b/  project2/</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal<br>λ ls prject2-auto-clone-submodules\<br>lib1/  lib2/  project2-infos.md<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">是不是爽歪歪~~~</span><br><span class="line"></span><br><span class="line">## 2. 移除submodule</span><br><span class="line">重新clone一个项目来练习移除submodule</span><br></pre></td></tr></table></figure></p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal<br>λ git clone –recursive ..\repo\project1.git\ project1-remove-submodules<br>Cloning into ‘project1-remove-submodules’…<br>done.<br>Submodule ‘lib1’ (C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/) registered for path ‘lib1’<br>Submodule ‘lib2’ (C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/) registered for path ‘lib2’<br>Cloning into ‘C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/project1-remove-submodules/lib1’…<br>done.<br>Cloning into ‘C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/project1-remove-submodules/lib2’…<br>done.<br>Submodule path ‘lib1’: checked out ‘139f263f4c444d140d3ca3efe7d949f4b2a5b77b’<br>Submodule path ‘lib2’: checked out ‘5d2403124046f72b364b0355717013c8221d1fbd’</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal<br>λ cd project1-remove-submodules\<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 2.1 删除git cache</span><br></pre></td></tr></table></figure></p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ git rm -f –cached lib1<br>rm ‘lib1’</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ git rm -f –cached lib2<br>rm ‘lib2’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 2.2 物理删除本地文件夹和.gitmodules</span><br></pre></td></tr></table></figure></p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ rm -f lib1<br>rm: cannot remove ‘lib1’: Is a directory</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ rm -rf lib1</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ rm -rf lib2</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ ls<br>project1-infos.md</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ rm -rf .gitmodules</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">因为这里只有两个子模块，所以直接删除了`.gitmodules`,如果只需要删除某一个子模块，则在文件中删除对应的配置即可。</span><br><span class="line"></span><br><span class="line">### 2.3 删除`.git/config`的submodule配置</span><br><span class="line">源文件：</span><br></pre></td></tr></table></figure><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ cat .git\config<br>[core]<br>        repositoryformatversion = 0<br>        filemode = false<br>        bare = false<br>        logallrefupdates = true<br>        symlinks = false<br>        ignorecase = true<br>[submodule]<br>        active = .<br>[remote “origin”]<br>        url = C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project1.git\<br>        fetch = +refs/heads/<em>:refs/remotes/origin/</em><br>[branch “master”]<br>        remote = origin<br>        merge = refs/heads/master<br>[submodule “lib1”]<br>        url = C:/Users/TAL-YINGYU/Desktop/repo/lib1.git/<br>[submodule “lib2”]<br>        url = C:/Users/TAL-YINGYU/Desktop/repo/lib2.git/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除后：</span><br></pre></td></tr></table></figure></p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ cat .git\config<br>[core]<br>        repositoryformatversion = 0<br>        filemode = false<br>        bare = false<br>        logallrefupdates = true<br>        symlinks = false<br>        ignorecase = true<br>[remote “origin”]<br>        url = C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project1.git\<br>        fetch = +refs/heads/<em>:refs/remotes/origin/</em><br>[branch “master”]<br>        remote = origin<br>        merge = refs/heads/master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 2.4 提交更改</span><br></pre></td></tr></table></figure></p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ git status<br>On branch master<br>Your branch is up to date with ‘origin/master’.</p><p>Changes to be committed:<br>  (use “git reset HEAD <file>…” to unstage)</file></p><pre><code>deleted:    lib1deleted:    lib2</code></pre><p>Changes not staged for commit:<br>  (use “git add/rm <file>…” to update what will be committed)<br>  (use “git checkout – <file>…” to discard changes in working directory)</file></file></p><pre><code>deleted:    .gitmodules</code></pre><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ git add .gitmodules</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ git status<br>On branch master<br>Your branch is up to date with ‘origin/master’.</p><p>Changes to be committed:<br>  (use “git reset HEAD <file>…” to unstage)</file></p><pre><code>deleted:    .gitmodulesdeleted:    lib1deleted:    lib2</code></pre><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ git commit -m “delete submodules”<br>[master b26add0] delete submodules<br> 3 files changed, 8 deletions(-)<br> delete mode 100644 .gitmodules<br> delete mode 160000 lib1<br> delete mode 160000 lib2</p><p>C:\Users\TAL-YINGYU\Desktop\workSpaceLocal\project1-remove-submodules (master -&gt; origin)<br>λ git push<br>Enumerating objects: 3, done.<br>Counting objects: 100% (3/3), done.<br>Delta compression using up to 12 threads<br>Compressing objects: 100% (1/1), done.<br>Writing objects: 100% (2/2), 243 bytes | 243.00 KiB/s, done.<br>Total 2 (delta 0), reused 0 (delta 0)<br>To C:/Users/TAL-YINGYU/Desktop/workSpaceLocal/..\repo\project1.git\<br>   b5208b3..b26add0  master -&gt; master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3. END</span><br><span class="line"></span><br><span class="line">零零碎碎总算写完了，写的有点啰嗦。  </span><br><span class="line">不过实际上，确实需要经过自己练习，才能熟练掌握git submodule的使用技巧。  </span><br><span class="line">如果你有更好的方法，希望能留下宝贵的意见。</span><br><span class="line"></span><br><span class="line">## 4. `git submodule foreach xxx`可真是个万金油</span><br><span class="line">拉取所有子模块</span><br></pre></td></tr></table></figure></p><p>git submodule foreach git pull<br>git submodule foreach –recursive git submodule init<br>git submodule foreach –recursive git submodule update<br>```</p>]]></content>
    
    <summary type="html">
    
      项目的版本库在某些情况虾需要引用其他版本库中的文件，例如公司积累了一套常用的函数库，被多个项目调用，显然这个函数库的代码不能直接放到某个项目的代码中，而是要独立为一个代码库，那么其他项目要调用公共函数库该如何处理呢？分别把公共函数库的文件拷贝到各自的项目中会造成冗余，丢弃了公共函数库的维护历史，这显然不是好的方法。
    
    </summary>
    
    
      <category term="Tools" scheme="http://blog.92yu.win/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-初级算法-存在重复元素</title>
    <link href="http://blog.92yu.win/2018/09/13/Leetcode-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>http://blog.92yu.win/2018/09/13/Leetcode-初级算法-存在重复元素/</id>
    <published>2018-09-13T14:31:21.000Z</published>
    <updated>2021-07-04T07:46:32.239Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</strong></p></blockquote><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>给定一个整数数组，判断是否存在重复元素。<br>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。  </p><blockquote><p><strong>示例1</strong><br>输入: [1,2,3,1]<br>输出: true<br><strong>示例 2:</strong><br>输入: [1,2,3,4]<br>输出: false<br><strong>示例 3:</strong><br>输入: [1,1,1,3,3,4,3,2,4,2]<br>输出: true  </p></blockquote></blockquote><h1 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h1><h2 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h2><blockquote><p>双层循环，就是想着说先用最笨的办法实现了，后面在优化</p><blockquote><p><strong><em>耗时：1764ms</em></strong>  </p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool containsDuplicate(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int size = nums.size();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            for (int j = i + 1; j &lt; size; j++)&#123;</span><br><span class="line">                if (nums[i] == nums[j])</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h2><blockquote><p>采用双指针循环法<br>基准指针先指向数组的第0个位置，游标指针指向数组的第1个位置，比较数据是否相等<br>若想等，则返回true<br>若不等，则游标指针所指向的数据复制到基准指针的下一位，基准指针和游标指针各自从当前位置向后移一位，再次比较  </p><blockquote><p><strong><em>耗时：24ms</em></strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool containsDuplicate(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int size = nums.size();</span><br><span class="line">        if (1 == size) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">    </span><br><span class="line">        int start = 0;</span><br><span class="line">        int next = 1;</span><br><span class="line">        while (next &lt; size) &#123;</span><br><span class="line">            if (nums[start] == nums[next]) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                nums[start +1] = nums[next];</span><br><span class="line">                ++start;</span><br><span class="line">                ++next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="网上优秀思路"><a href="#网上优秀思路" class="headerlink" title="网上优秀思路"></a>网上优秀思路</h1><blockquote><p>在数组不为空且数组元素个数大于2的情况下，对数组元素循环对比，同时，用一个临时变量来保存从0到i-1之间的最大元素，如果当前值比之前的值都大，那么这之前的值里面不可能有比它再大的值，从而就减少了查询次数</p><blockquote><p><strong><em>耗时：8ms</em></strong></p></blockquote><p><em>以下第一段代码解释参见我的博客<a href="http://blog.92yu.win/2018/09/13/C++%E4%B8%AD%E4%BC%98%E5%8C%96IO%E6%95%88%E7%8E%87/">C++中优化IO效率 – 点击直达</a></em></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">static const auto xxx = []() &#123;</span><br><span class="line">    std::ios::sync_with_stdio(false);</span><br><span class="line">    std::cin.tie(nullptr);</span><br><span class="line">    return nullptr;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool containsDuplicate(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        if(nums.empty() || 1 == nums.size())</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int temp = nums[0];</span><br><span class="line">        for(int i = 1; i &lt; nums.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            if(temp &lt; nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            else if(temp == nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                for(int j = 0; j &lt; i; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    if(nums[i] == nums[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        return true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      给定一个整数数组，判断是否存在重复元素
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.92yu.win/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-初级算法-数组循环右移</title>
    <link href="http://blog.92yu.win/2018/09/13/Leetcode-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB/"/>
    <id>http://blog.92yu.win/2018/09/13/Leetcode-初级算法-数组循环右移/</id>
    <published>2018-09-13T14:31:03.000Z</published>
    <updated>2021-07-04T07:46:32.239Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</strong></p></blockquote><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p><blockquote><p><strong>示例1</strong><br>输入: [1,2,3,4,5,6,7] 和 k = 3<br>输出: [5,6,7,1,2,3,4]<br>解释:<br>向右旋转 1 步: [7,1,2,3,4,5,6]<br>向右旋转 2 步: [6,7,1,2,3,4,5]<br>向右旋转 3 步: [5,6,7,1,2,3,4]<br><strong>示例2</strong><br>输入: [-1,-100,3,99] 和 k = 2<br>输出: [3,99,-1,-100]<br>解释:<br>向右旋转 1 步: [99,-1,-100,3]<br>向右旋转 2 步: [3,99,-1,-100]<br><strong>说明</strong>  </p><ul><li>尽可能想出更多解决方案，至少有三种不同的方法可以解决这个问题</li><li>要求使用空间复杂度为O(1)的原地算法  </li></ul></blockquote></blockquote><h1 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h1><blockquote><p>在数组元素个数 n 不为0的前提下，分3种情况<br>1.如果 k 和 n 相同，则数组不变<br>2.如果 k 小于 n ，则对数组进行 k 次循环，把最后一个元素移到第一个元素，其他依次后移<br>3.如果 k 大于 n ，则对数组进行 k-n 次循环，重复步骤2</p><blockquote><p><strong><em>耗时: 384ms</em></strong></p></blockquote></blockquote><p>这个思路大概是最笨的方法，不得不承认，自己对于算法还是弱鸡。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void rotate(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        if (nums.empty())</span><br><span class="line">            return;</span><br><span class="line">        </span><br><span class="line">        if (nums.size() &gt; k)&#123;</span><br><span class="line">            for (int j = 0; j &lt; k; j++)&#123;</span><br><span class="line">                int temp = nums[nums.size() - 1];</span><br><span class="line">                for (int i = nums.size() - 1; i &gt; 0; i--)&#123;</span><br><span class="line">                    nums[i] = nums[i - 1];</span><br><span class="line">                &#125;</span><br><span class="line">                nums[0] = temp;</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">        else if (nums.size() &lt; k)&#123;</span><br><span class="line">            rotate(nums, k-nums.size());</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        for (int i = 0; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            cout &lt;&lt; nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="网上的优秀思路"><a href="#网上的优秀思路" class="headerlink" title="网上的优秀思路"></a>网上的优秀思路</h1><blockquote><p>这个思路是使用了C++标准库函数 reverse<br>假设输入数组的下标是0 ~ n-1，需要旋转的步数是k，那么按照下面的方法就可以完成旋转数组<br>（其中reverse表示用双指针交换的方法翻转数组）：<br>step 1. reverse原来的数组。<br>step 2. reverse 0~ k-1。<br>step 3. reverse k ~ n-1。<br>那么得到的新数组就是个旋转数组了。  </p><blockquote><p>举个例子来说是这样的：<br>元素组：    1 2 3 4 5            翻转步长：k=3<br>step 1 reverse原来的数组：        5 4 3 2 1<br>step 2 reverse 0~ k-1：             3 4 5 2 1<br>step 3 reverse k ~ n-1:             3 4 5 1 2<br>最后的【3 4 5 1 2】就是旋转数组的结果了，这种方法的时间复杂度是o（n），空间复杂度是o（1），是非常好的方法了<br><strong><em>耗时: 12ms</em></strong></p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void rotate(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        k = k % nums.size();</span><br><span class="line">        reverse(nums.begin(), nums.begin() + nums.size() - k);</span><br><span class="line">        reverse(nums.begin() + nums.size() - k, nums.end());</span><br><span class="line">        reverse(nums.begin(), nums.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.92yu.win/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>C++中优化IO效率</title>
    <link href="http://blog.92yu.win/2018/09/13/C++%E4%B8%AD%E4%BC%98%E5%8C%96IO%E6%95%88%E7%8E%87/"/>
    <id>http://blog.92yu.win/2018/09/13/C++中优化IO效率/</id>
    <published>2018-09-13T14:24:11.000Z</published>
    <updated>2021-07-04T07:46:32.237Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</strong></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在刷LeetCode的时候，发现时间靠前的答案总是会有以下类似代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static const auto xxx = []() &#123;</span><br><span class="line">    std::ios::sync_with_stdio(false);</span><br><span class="line">    std::cin.tie(nullptr);</span><br><span class="line">    return nullptr;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p><p>看到这个第一反应是懵逼的，仔细分析了一下，是一个lambda表达式，但是表达式的内容就看的晕晕乎乎了。  </p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>参考了网友的部分解答，对上述代码的解答基本如下：<br>这两段代码的都文件都是 <code>iostream</code>  </p><h2 id="std-ios-sync-with-stdio"><a href="#std-ios-sync-with-stdio" class="headerlink" title="std::ios::sync_with_stdio()"></a><code>std::ios::sync_with_stdio()</code></h2><blockquote><p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.<br>设置在每次输入/输出操作后标准C ++流是否与标准C流同步  </p></blockquote><p>另有<code>std::cin</code>的解释如下  </p><blockquote><p>The global objects std::cin and std::wcin control input from a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C input stream stdin.  </p><p>These objects are guaranteed to be constructed before the first constructor of a static object is called and they are guaranteed to outlive the last destructor of a static object, so that it is always possible to read from std::cin in user code.  </p><p>Unless sync_with_stdio(false) has been issued, it is safe to concurrently access these objects from multiple threads for both formatted and unformatted input.  </p><p>Once std::cin is constructed, std::cin.tie() returns &amp;std::cout, and likewise, std::wcin.tie() returns &amp;std::wcout. This means that any formatted input operation on std::cin forces a call to std::cout.flush() if any characters are pending for output.  </p></blockquote><p>基本可以了解到，C++为了兼容C语言，保证在代码中同时出现std::cout/std::cin和printf/scanf方法时不发生混乱，所以C++使用了一个缓冲区来同步C的标准IO流，通过使用<code>std::ios::sync_with_stdio(false)</code>来解除这种同步，是cout和cin不再经过缓冲区，进而节省了部分时间。<br>但是要<strong><em>注意：解除了同步之后，不能再使用C的库函数（scanf,getchar,gets,fgets,fscanf之类）</em></strong></p><h2 id="std-cin-tie"><a href="#std-cin-tie" class="headerlink" title="std::cin.tie"></a><code>std::cin.tie</code></h2><blockquote><p>Get/set tied stream<br>The first form (1) returns a pointer to the tied output stream.  </p><p>The second form (2) ties the object to tiestr and returns a pointer to the stream tied before the call, if any.  </p><p>The tied stream is an output stream object which is flushed before each i/o operation in this stream object.  </p><p>C++11<br>By default, the standard narrow streams cin and cerr are tied to cout, and their wide character counterparts (wcin and wcerr) to wcout. Library implementations may also tie clog and wclog.  </p></blockquote><p>这个理解起来又容易一些，因为<code>std :: cin</code>默认是与<code>std :: cout</code>绑定的，所以每次操作的时候（也就是调用”&lt;&lt;”或者”&gt;&gt;”）都要刷新（调用flush），这样增加了IO的负担，通过tie(nullptr)来解除std :: cin和std :: cout之间的绑定，来降低IO的负担使效率提升。  </p>]]></content>
    
    <summary type="html">
    
      std::ios::sync_with_stdio和std::cin.tie用法解释
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.92yu.win/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++中getchar、scanf等输入</title>
    <link href="http://blog.92yu.win/2018/08/30/C-%E4%B8%ADgetchar%E3%80%81scanf%E7%AD%89%E8%BE%93%E5%85%A5/"/>
    <id>http://blog.92yu.win/2018/08/30/C-中getchar、scanf等输入/</id>
    <published>2018-08-30T14:46:19.000Z</published>
    <updated>2021-07-04T07:46:32.238Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h1><h2 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int getchar(void)</span><br><span class="line">&#123;</span><br><span class="line">    static char buf[BUFSIZ];</span><br><span class="line">    static char* bb=buf;</span><br><span class="line">    static int n=0;</span><br><span class="line">    if(n==0)</span><br><span class="line">    &#123;</span><br><span class="line">        n=read(0,buf,BUFSIZ);</span><br><span class="line">        bb=buf;</span><br><span class="line">    &#125;</span><br><span class="line">    return(--n&gt;=0)?(unsigned char)*bb++:EOF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数声明在 <stdio.h>中。<br>Reads a character from standard input.</stdio.h></p><p>当程序调用getchar时，程序就等着用户按键输入，以回车结束输入。  </p><blockquote><p>用户输入的字符存放在键盘缓冲区中（回车也存放在缓冲区中）。 当用户按下回车之后，getchar开始从缓冲区每次读取一个字符。<br>getchar函数返回值是用户输入字符的ASCII码值，若EOF(End-Of-File)则返回-1，并且将用户输入的字符回显到屏幕。</p><blockquote><p>也就是说：<strong><em>如果缓冲区有数据的话，getchar()方法不用等你手动输入，它会直接读取一个字符。</em></strong></p></blockquote></blockquote><hr><h2 id="getch"><a href="#getch" class="headerlink" title="getch"></a>getch</h2><p>getch功能基本上与getchar相同。区别在于getch不等待回车，只要用户按一个键，就会立刻返回。<br>getch返回值也是ASCII码值，出错返回-1。<br><strong><em>注意：</em></strong><br>getch函数是<strong><em>非缓冲输入函数</em></strong>，即不能用getch来接收缓冲区已存在的字符。  </p><blockquote><p>通常getch用于程序调试中，在关键位置显示有关结果以查看，然后用getch函数暂停程序运行，按下任一按键继续程序运行。</p></blockquote><hr><h2 id="getche"><a href="#getche" class="headerlink" title="getche"></a>getche</h2><p>与上面两个函数功能类似，都是接收一个字符，返回值同样是ASCII码值。  </p><blockquote><p>不同的是，<strong><em>此函数在输入后立刻从控制台读取字符，不以回车为结束标识。</em></strong></p></blockquote><hr><h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h2><p>scanf这个函数比较特别<br>scanf输入字符串，整型，实型等数据的判断方式都一样，回车，空格，tab键都会被认为是输入的结束。<strong>当然字符的话，一个字符就是结束了。</strong>  </p><p><font coclor="#FF0000"><strong>回车、空格等都有对应的ASCII码，所以用scanf输入字符时要小心这些东西被当成字符输进去，而输入字符串和整型、实型等数据时这些都被当成分隔符而不会被输入到字符数组或变量里。</strong></font></p><blockquote><p>如果scanf输入的不是字符，那么分隔符为回车，空格、tab键时，两个数据之间的分隔符只是起区别两个数据的作用，把分隔好的两个数据分别赋值到各自定义好的变量或数组中去，两个数据之间的分隔符被从缓冲区读出但是不起任何作用，<strong><em>当然最后一个’\n ‘会被留在缓冲区内，除非用getchar();或scanf(“%c”,&amp;c);把它读出来。</em></strong><br>回车是一定要有的，不管getchar还是scanf只要是通过缓冲区输入数据的函数都是等待回车键 ‘\n ‘出现才进入缓冲区的。</p></blockquote><h1 id="程序举例"><a href="#程序举例" class="headerlink" title="程序举例"></a>程序举例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc)</span><br><span class="line">&#123;</span><br><span class="line">    int a, c;</span><br><span class="line">    printf(&quot;please input a char: \n&quot;);</span><br><span class="line">    a = getchar();</span><br><span class="line">    if (EOF != a) &#123;</span><br><span class="line">        printf(&quot;aaa == %c \n&quot;, a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    while ((c = getchar()) != &apos;\n&apos; ) &#123;</span><br><span class="line">        if (EOF == a) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;ccc == %d \n&quot;, c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;press any key to continue: \n&quot;);</span><br><span class="line">    getchar();  </span><br><span class="line">    //此处 getchar()在这里作用等同于 system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为<br><img src="http://paypimq0d.bkt.clouddn.com/blog/getchar.png" alt="gethar">  </p>]]></content>
    
    <summary type="html">
    
      关于C++中标准输入的一些思考
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.92yu.win/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-初级算法-两数之和</title>
    <link href="http://blog.92yu.win/2018/08/30/Leetcode-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://blog.92yu.win/2018/08/30/Leetcode-初级算法-两数之和/</id>
    <published>2018-08-30T11:46:41.000Z</published>
    <updated>2021-07-04T07:46:32.238Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。<br>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p><p>示例：</p><blockquote><p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]  </p></blockquote></blockquote><h2 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h2><blockquote><p>遍历每个元素 x，并查找是否存在一个值与 target−x 相等的目标元素。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        vector&lt;int&gt; vecResult;</span><br><span class="line">        for (int i = 0; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j = i + 1; j &lt; nums.size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(nums[i] == target - nums[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    vecResult.push_back(i);</span><br><span class="line">                    vecResult.push_back(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return vecResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li>时间复杂度：O(n<sup>2</sup>)<br>  对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n) 的时间。因此时间复杂度为 O(n<sup>2</sup>)。</li><li>空间复杂度：O(1)</li></ul><h2 id="网上优秀思路"><a href="#网上优秀思路" class="headerlink" title="网上优秀思路"></a>网上优秀思路</h2><blockquote><p>通过牺牲空间换取速度的方式。<br>将vector的元素添加到map的键值对中，同时检查表中是否已经存在当前元素所对应的目标元素。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">    vector&lt;int&gt; vecResult;</span><br><span class="line">    map&lt;int, int&gt; mapResult;</span><br><span class="line">    for (int i = 0; i &lt; nums.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int complement = target - nums[i];</span><br><span class="line">        auto it = mapResult.find(complement);</span><br><span class="line">        if (it != mapResult.end())</span><br><span class="line">        &#123;</span><br><span class="line">            vecResult.push_back(i);</span><br><span class="line">            vecResult.push_back(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        mapResult[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    return vecResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li>时间复杂度：O(n)<br>  我们只遍历了包含有n个元素的列表一次。在表中进行的每次查找只花费 O(1) 的时间。</li><li>空间复杂度：O(n)<br>  所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 n 个元素。</li></ul><h2 id="貌似使用hash-map效率会更高"><a href="#貌似使用hash-map效率会更高" class="headerlink" title="貌似使用hash_map效率会更高"></a>貌似使用hash_map效率会更高</h2>]]></content>
    
    <summary type="html">
    
      给定一个整数数组和一个目标值，找出数组中和为目标值的两个数
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://blog.92yu.win/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>C++面试</title>
    <link href="http://blog.92yu.win/2018/08/27/C-%E9%9D%A2%E8%AF%95/"/>
    <id>http://blog.92yu.win/2018/08/27/C-面试/</id>
    <published>2018-08-27T14:18:14.000Z</published>
    <updated>2021-07-04T07:46:32.238Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>记录自己遇到的一些C++基础面试题目</p><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><ol><li><p><code>override</code>和<code>final</code>的区别</p><blockquote><p><code>override</code>是用来标识派生类需要重写的方法;<br><code>final</code>是用来标识派生类不能重写的方法</p></blockquote></li><li><p><code>sizeof</code>的用法<br><em>首先应该明确sizeof是一个C语言关键字而不是一个函数，用于计算数据空间的字节数，其计算发生在编译时刻。</em></p><blockquote><p><code>sizeof</code>运算符的结果部分依赖于其作用的类型：</p><ul><li>对<strong>char或者类型为char的表达式</strong>执行sizeof运算，结果为1</li><li>对<strong>引用</strong>执行sizeof运算结果得到被引用对象本身所占空间的大小</li><li>对<strong>指针</strong>执行sizeof运算得到指针本身所占空间的大小</li><li>对<strong>解引用指针</strong>执行sizeof运算得到指针所指向的对象所占空间大小，指针不需要有效</li><li>对<strong>数组</strong>执行sizeof运算得到整个数组所占空间大小，等价于对数组中所有元素各执行一次sizeof运算并求和。<strong><em>注意：</em></strong>sizeof运算不会把数组转化成指针来处理</li><li>对<strong>string对象或者vector对象</strong>执行sizeof运算只返回该类型固定部分的大小，不会计算对象中的元素占用了多少空间</li></ul></blockquote></li></ol><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小</th></tr></thead><tbody><tr><td style="text-align:left">int *p</td><td style="text-align:left">sizeof(p) = 4；//sizeof(*p) 相当于sizeof(int)</td></tr><tr><td style="text-align:left">int a[10]</td><td style="text-align:left">sizeof(a) = 4*10</td></tr><tr><td style="text-align:left">char a = “hello”</td><td style="text-align:left">sizeof(a) = 6;   //<em>结尾处有<code>\0</code></em></td></tr><tr><td style="text-align:left">double<em> (</em>a)[3][6];</td><td style="text-align:left">sizeof(a) = 4; //<em>a为指针</em></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">sizeof(<em>a) = 72; // \</em>a为有3*6个元素的数组</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">sizeof(<em>*a) = 24; // \</em>*a为数组一维的6个指针</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">sizeof(<em>**a) = 4; // \</em>**a为数组一维的第一个指针</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">sizeof(<em>**</em>a) = 8; // ****a为double类型的变量</td></tr></tbody></table><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1>]]></content>
    
    <summary type="html">
    
      记录自己遇到的C++面试题目 -- 持续更新
    
    </summary>
    
    
      <category term="面试" scheme="http://blog.92yu.win/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>C++中int与bye的相互转换</title>
    <link href="http://blog.92yu.win/2018/07/21/C-%E4%B8%ADint%E4%B8%8Ebye%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <id>http://blog.92yu.win/2018/07/21/C-中int与bye的相互转换/</id>
    <published>2018-07-21T03:28:55.000Z</published>
    <updated>2021-07-04T07:46:32.238Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</p><p>byte不是一种新类型，在C++中byte被定义的是unsigned char类型；<br>但在C#里面byte被定义的是unsigned int类型  </p></blockquote><p><strong>int转byte</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  void  intToByte(int i,byte *bytes,int size = 4)  </span><br><span class="line">  &#123;  </span><br><span class="line">    //byte[] bytes = new byte[4];  </span><br><span class="line">    memset(bytes,0,sizeof(byte) *  size);  </span><br><span class="line">    bytes[0] = (byte) (0xff &amp; i);  </span><br><span class="line">    bytes[1] = (byte) ((0xff00 &amp; i) &gt;&gt; 8);  </span><br><span class="line">    bytes[2] = (byte) ((0xff0000 &amp; i) &gt;&gt; 16);  </span><br><span class="line">    bytes[3] = (byte) ((0xff000000 &amp; i) &gt;&gt; 24);  </span><br><span class="line">    return ;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>byte转int</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int bytesToInt(byte* bytes,int size = 4)   </span><br><span class="line">&#123;</span><br><span class="line">    int addr = bytes[0] &amp; 0xFF;  </span><br><span class="line">    addr |= ((bytes[1] &lt;&lt; 8) &amp; 0xFF00); addr |= ((bytes[2] &lt;&lt; 16) &amp; 0xFF0000);  </span><br><span class="line">    addr |= ((bytes[3] &lt;&lt; 24) &amp; 0xFF000000);  </span><br><span class="line">    return addr;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      采用移位方式进行转换
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.92yu.win/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>关于C++中memset方法的使用笔记</title>
    <link href="http://blog.92yu.win/2018/07/16/%E5%85%B3%E4%BA%8EC-%E4%B8%ADmemset%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.92yu.win/2018/07/16/关于C-中memset方法的使用笔记/</id>
    <published>2018-07-16T14:44:16.000Z</published>
    <updated>2021-07-04T07:46:32.240Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>本文首发于我的个人Blog<a href="http://blog.92yu.win">阿西BUG</a>，欢迎大家批评指正</p></blockquote><p>最近在用C++写服务端逻辑，在使用memset的时候出现了一些问题</p><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>memset在对一个二维数组进行初始化的时候，因为某些原因需要初始化<strong>不为0</strong>，这就导致了问题的出现</p><p>先贴代码看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORD wLeftCardData[2][30];</span><br><span class="line">memset(m_pLeftCardInfo-&gt;wLeftCardData[1], 4, sizeof(WORD)* 30);</span><br></pre></td></tr></table></figure></p><blockquote><p>得到的结果不是我想要的4， 而是1028</p></blockquote><p>真是百思不得其解。。。。</p><h3 id="memset原理"><a href="#memset原理" class="headerlink" title="memset原理"></a>memset原理</h3><p>memset方法原型是: <code>void *memset( void *buffer, int ch, size_t count );</code><br>功能：函数拷贝ch 到buffer 从头开始的count 个字符里, 并返回buffer指针。 memset() 可以应用在将一段内存初始化为某个值。<br>例如：  <code>memset( the_array, &#39;\0&#39;, sizeof(the_array) );</code></p><blockquote><p>这是将一个数组的所有分量设置成零的很便捷的方法。</p></blockquote><h3 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h3><p>memset方法是按照<strong>字节</strong>进行赋值的<br>在我的错误代码中，WORD类型占两个字节，那么memset就会分别对WORD的高字节和低字节分别填充4这个值,那么每个WORD的值就相当于0x4040 = 1028</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>memset函数按字节对内存块进行初始化<br>  <strong>所以不能用它将int数组初始化为0和-1之外的其他值（除非该值高字节和低字节相同）</strong></li><li><code>memset(void *s, int ch,size_tn);</code> 中ch实际范围应该在0~~255，<strong>因为该函数只能取ch的后八位赋值给你所输入的范围的每个字节</strong><br>  比如int a[5]赋值memset（a,-1,sizeof(int )<em>5）与memset（a,511,sizeof(int )</em>5） 所赋值的结果是一样的都为-1；<br>  因为-1的二进制码为（11111111 11111111 11111111 11111111），而511的二进制码为（00000000 00000000 00000001 11111111）后八位都为（11111111)</li></ul><h3 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h3><p>那么，有没有什么好的方法替代memset对变量进行非0/1的初始化呢？<br>答案是有的<br>可以参考<code>std::fill</code>方法</p>]]></content>
    
    <summary type="html">
    
      memset的常见错误以及分析
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.92yu.win/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>从0开始搭建ss多用户控流vps</title>
    <link href="http://blog.92yu.win/2017/12/19/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAss%E5%A4%9A%E7%94%A8%E6%88%B7%E6%8E%A7%E6%B5%81vps/"/>
    <id>http://blog.92yu.win/2017/12/19/从0开始搭建ss多用户控流vps/</id>
    <published>2017-12-19T01:05:45.000Z</published>
    <updated>2021-07-04T07:46:32.240Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>我想这大概是对新手最完整的教程了….闲话不多说，开始正题</p><h3 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h3><p>这里我们使用的服务器为CentOS v7版本,相关配置为Nginx v1.12 + MySQL v5.7 + PHP v7.0.5 .其他版本大同小异，各自注意区分即可。<br>这里的服务器是全新的服务器，上面什么配置都没有的。所以首先我们安装一些必备的工具。<br>依次执行如下命令，<br>安装wget下载工具：<br><code>yum install wget</code><br>安装gcc编译工具：<br><code>yum install gcc</code><br>安装git服务：<br><code>yum install git</code><br>安装python pip：<br><code>yum install python-pip</code></p><h4 id="Nginx安装配置"><a href="#Nginx安装配置" class="headerlink" title="Nginx安装配置"></a>Nginx安装配置</h4><p>这里使用CentOS自带的yum命令安装：<br>首先，执行<code>rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code> ,可以通过变换上面的地址找到和自己服务器对应版本的 repo 的 rpm。<br>安装好 yum repo 之后，接下来用 yum 安装 nginx<br><code>yum install nginx</code><br>到此Nginx已经安装完成，可以执行 <code>nginx -v</code> 查看版本<br>设置开机启动：<br><code>systemctl enable nginx</code><br>立即启动Nginx<br><code>Systemctl start nginx</code><br>查看Nginx服务状态<br><code>Systemctl status nginx</code><br>到此，Nginx已经安装配置完成，可以在浏览器输入服务器ip访问，看到Nginx欢迎页面即为成功。</p><h4 id="MySQL安装配置"><a href="#MySQL安装配置" class="headerlink" title="MySQL安装配置"></a>MySQL安装配置</h4><p>这里同样用 yum 安装 MySQL.<br><code>rpm -Uvh http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</code><br>接着安装 MySQL<br><code>yum install mysql-community-server mysql-community-devel</code><br>安装完成的默认配置文件会在这个路径 <code>/etc/my.cnf</code> 可以根据实际需要修改里边的选项。<br>这里要注意的配置文件中如下位置，因为后面配置 PHP 的时候讲会用到：<br><code>socket=/var/lib/mysql/mysql.sock</code><br>看看下 MySQL 的状态<br><code>systemctl status mysqld</code><br>结果如下表示安装完成并且已经添加到了自启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqld.service - MySQL Server</span><br><span class="line">Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled)</span><br><span class="line">Active: inactive (dead)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>启动MySQL：<br><code>systemctl start mysqld</code><br>MySQL v5.7版本是会自动为 root@localhost用户创建一个默认密码的，可以通过如下命令找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep `temporary password` /var/log/mysqld.log</span><br></pre></td></tr></table></figure></p><blockquote><p>2016-04-07T15:39:59.942230Z 1 [Note] A temporary password is generated for root@localhost: UH!e%iTsIgs:</p></blockquote><p>上面的 <em>UH!e%iTsIgs</em> 就是默认密码，现在可以登入MySQL并修改密码：<br><code>mysql -uroot -p</code></p><blockquote><p>Enter password:<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 3<br>Server version: 5.7.11<br>…</p></blockquote><p>MySQL 5.7 版本对密码的安全性要求很严格，必须至少包含1个大写字母、1个小写字母、1个数字和1个特殊字符，长度不得小于8个字符。<br>修改密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER `root`@`localhost` IDENTIFIED BY `Lnmp.cn8`;</span><br></pre></td></tr></table></figure></p><p>其中<em>Lnmp.cn8</em> 就是新密码。<br>退出MySQL：<code>mysql&gt; quit</code></p><h4 id="PHP-v7安装配置"><a href="#PHP-v7安装配置" class="headerlink" title="PHP v7安装配置"></a>PHP v7安装配置</h4><p>下载源码到 usr/local/src，<br><code>cd usr/local/src</code><br><code>wget -c http://cn2.php.net/distributions/php-7.0.5.tar.gz</code><br>解压<br><code>tar -zxvf php-7.0.5.tar.gz</code><br>进入解压后的文件夹：<br><code>cd php-7.0.5/</code><br>可以通过<code>./configure --help</code>看到，有三百多个扩展选项，可以自己根据需要增减，<br>这里我们预先那些准备装的扩展要用到的软件模块<br><code>yum -y install libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel curl curl-devel openssl openssl-devel</code><br>接下来configure PHP<br><code>./configure --prefix=/usr/local/php7 --enable-fpm --with-fpm-user=nginx --with-fpm-group=nginx --with-pdo-mysql --with-mysql-sock=/var/lib/mysql/mysql.sock --with-zlib --with-curl --with-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --with-openssl --enable-mbstring --enable-xml --enable-session --enable-ftp --enable-pdo -enable-tokenizer --enable-zip</code></p><p>值得一提的是，PHP7已经删除了MySQL扩展，所以 <code>-with-mysql</code> 不再是一个有效的选项。这里用 PDO 代替。<br>其中 –prefix 是安装目录，如果需要在同一个服务器安装多个 PHP 版本，这个 –prefix 设定是很有必要的。<br>configure成功会有  <em>Thank you for using PHP</em>  字样。<br>编译：<code>make</code><br>然后<code>make install</code><br>如果安装 PHP 时没有指明 –prefix ，那么就 php.ini 路径就是 <code>/usr/local/lib/php.ini</code> 。刚才安装时有指明 –prefix ，所以是 <code>/usr/local/php7/lib/php.ini</code><br>然后根据实际自己需要修改 php.ini。<br><code>vi /usr/local/php7/lib/php.ini</code><br>查找 <code>mysqli.default_socket</code>，修改成：<br><code>mysqli.default_socket = /var/lib/mysql/mysql.sock</code><br>其中 <code>/var/lib/mysql/mysql.sock</code> 就是上面安装 MySQL 时提到的。这个值必须填，否则会出现如下错误：<br><code>Warning: mysqli_connect(): (HY000/2002): No such file or directory</code><br>修改时区，查找 <code>date.timezone</code>，改成：<br><code>date.timezone = PRC</code><br>好了，PHP 7 已经安装好，下面验证一下: <code>/usr/local/php7/bin/php -v</code><br>显示PHP版本即为成功。<br>例行拷贝配置文件，以备不时只需<br><code>cp /usr/local/php7/etc/php-fpm.conf.default /usr/local/php7/etc/php-fpm.conf</code><br><code>cp /usr/local/php7/etc/php-fpm.d/www.conf.default /usr/local/php7/etc/php-fpm.d/www.conf</code><br>可以打开<code>/usr/local/php7/etc/php-fpm.d/www.conf</code>看到如下字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen = 127.0.0.1:9000</span><br></pre></td></tr></table></figure><p>如果文件中上述字段配置不一样，改为上述内容。<br>其中<code>listen = 127.0.0.1:9000</code>要注意，9000这个端口在配置网站时要用到。<br>配置 php-fpm 启动服务脚本：<br>在解压后的php文件目录下执行：<code>cp sapi/fpm/php-fpm.service /usr/lib/systemd/system/</code><br>修改启动脚本，把里边 prefix 相关的内容用实际路径代替:<br><code>vi /usr/lib/systemd/system/php-fpm.service</code><br>将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PIDFile=$&#123;prefix&#125;/var/run/php-fpm.pid</span><br><span class="line">ExecStart=$&#123;exec_prefix&#125;/sbin/php-fpm --nodaemonize --fpm-config $&#123;prefix&#125;/etc/php-fpm.conf</span><br></pre></td></tr></table></figure></p><p>修改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PIDFile=/usr/local/php7/var/run/php-fpm.pid</span><br><span class="line">ExecStart=/usr/local/php7/sbin/php-fpm --nodaemonize --fpm-config /usr/local/php7/etc/php-fpm.conf</span><br></pre></td></tr></table></figure></p><p>重新载入 systemd<br><code>systemctl daemon-reload</code><br>让 php-fpm 随机启动<br><code>systemctl enable php-fpm</code><br>立即启动 php-fpm<br><code>systemctl start php-fpm</code><br>查看状态：<code>systemctl status php-fpm</code>，看到服务running即可。</p><h4 id="配置-Nginx-站点"><a href="#配置-Nginx-站点" class="headerlink" title="配置 Nginx 站点"></a>配置 Nginx 站点</h4><p>先建立一个 lnmp 站点，路径是 <code>/www/lnmp/web</code><br><code>mkdir -p /www/lnmp/web</code><br>并准备好 phpinfo 测试文件<br><code>vi /www/lnmp/web/phpinfo.php</code><br>输入如下内容保存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>每个站点建一个 Nginx 配置文件放到 <code>/etc/nginx/conf.d/</code> 中<br><code>cd /etc/nginx/conf.d/</code><br><code>vi lnmp.cn.conf</code><br>在 <code>lnmp.cn.conf</code> 中加入以下内容然后保存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.lnmp.cn;</span><br><span class="line">    root         /www/lnmp/web;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.php index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中 <code>server_name  www.lnmp.cn</code>; 中的 www.lnmp.cn 改成你自己的域名<br>其中 <code>root         /www/lnmp/web</code>; 就是刚才创建的站点目录<br>其中 <code>fastcgi_pass   127.0.0.1:9000</code>; 就是上面配置 php-fpm 提到要留意的值<br>修改配置后一定要记得 reload nginx 才能生效<br><code>systemctl reload nginx</code><br>好了，大功告成，就打开刚才的域名验证下（如果没有已经指向配置好的服务器 IP的域名，使用ip也可以）<br>如果打不开，或者报错<code>dial tcp4 xxxxxx:80: getsockopt: no route to host</code><br>那么说明你的服务器80端口还没打开，你需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl start firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure></p><h3 id="安装并配置-ss-panel"><a href="#安装并配置-ss-panel" class="headerlink" title="安装并配置 ss-panel"></a>安装并配置 ss-panel</h3><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><p>为前端的 ss-panel 是使用 PHP 编写的网页应用程序，它对你的主机运行环境有一定的要求。</p><ul><li>PHP 5.6 或更高</li><li>MySQL 5.5 或更高</li><li>支持 URL 重写的 Web 服务器（Nginx / Apache 均可）</li></ul><h4 id="下载-ss-panel-源码"><a href="#下载-ss-panel-源码" class="headerlink" title="下载 ss-panel 源码"></a>下载 ss-panel 源码</h4><p>ss-panel 的 GitHub 项目地址：<a href="https://github.com/orvice/ss-panel" target="_blank" rel="noopener">orvice/ss-panel</a><br>cd到你的web根目录下，clone ss-panel：<br><code>git clone https://github.com/orvice/ss-panel.git -b v3</code><br>其中 -b v3是代表clone v3版本的ss-panel<br>当然你也可以下载源码再用 SCP/FPS 传到服务器上去。<br>注意源码下载完成后的目录结构，请务必保证 /public 目录在站点的根目录下。你可以使用  <code>mv ss-panel/{.,}* ./</code> 命令将子目录的内容移动到当前目录来。</p><h4 id="配置-ss-panel"><a href="#配置-ss-panel" class="headerlink" title="配置 ss-panel"></a>配置 ss-panel</h4><p>这个时候访问你的站点是会得到403 Forbidden, 因为此时站点根目录下是没有index.php文件的。当然这样也很正常，大部分 MVC 框架都将 index.php 的入口文件放到其他子目录下了，这样做是为了保护根目录下的配置文件等可能会导致信息泄露的敏感文件无法被访问。<br>接下来可以按照<a href="https://github.com/orvice/ss-panel/tree/v3" target="_blank" rel="noopener">官方文档</a>来配置的你web</p><blockquote><p>Step 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sS https://getcomposer.org/installer | php</span><br><span class="line">$ php composer.phar  install</span><br></pre></td></tr></table></figure></p><p>Step 2<br>将 .env.example 复制一份重命名为 .env，自行修改其中的数据库等信息。<br><code>cp .env.example .env</code><br>then edit .env<br><code>vi .env</code><br>你还需要修改 .env 中的 muKey 字段，修改为任意字符串（最好只包含 ASCII 字符），下面配置后端的时候我们需要使用到这个 muKey：<br><code>muKey = &#39;api_key_just_for_test&#39;</code><br>then<br><code>chmod -R 777 storage</code></p><p>Step 3<br>Import the sql to you mysql database.<br><code>mysql -u root -p xxxxx &lt; db.sql</code>,其中xxxxx是你的数据库名字</p><p>Step 4<br>Nginx Config example:<br>if you download ss-panel on path /home/www/ss-panel</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root /home/www/ss-panel/public;</span><br><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在访问你的站点，不出意外，就可以看到ss-panel首页了。</p><h4 id="进入-ss-panel-后台"><a href="#进入-ss-panel-后台" class="headerlink" title="进入 ss-panel 后台"></a>进入 ss-panel 后台</h4><p>现在访问 <code>http://your-domain/admin</code> 就可以进入 ss-panel 后台了。<br>不过细心的你可能会注意到，刚才导入数据表的时候，user 表并没有添加记录，那要咋进管理后台呢？当然你可以在数据库中手动加一条记录，不过作者已经提供了一个更方便的方式：<br><code>php xcat createAdmin</code><br>在站点根目录下运行，根据提示即可创建管理员账号。探后根据提示输入账号密码就可以登入到自己的后台了。</p><h3 id="部署并配置-shadowsocks-manyuser"><a href="#部署并配置-shadowsocks-manyuser" class="headerlink" title="部署并配置 shadowsocks-manyuser"></a>部署并配置 shadowsocks-manyuser</h3><h4 id="安装-shadowsocks-manyuser"><a href="#安装-shadowsocks-manyuser" class="headerlink" title="安装 shadowsocks-manyuser"></a>安装 shadowsocks-manyuser</h4><p>我们使用 <a href="https://github.com/fsgmhoward/shadowsocks-py-mu" target="_blank" rel="noopener">fsgmhoward/shadowsocks-py-mu</a> 这个版本的后端。这个后端支持使用 MultiUser API 与前端的 ss-panel 进行用户信息交互。</p><p>这个 API 的官方介绍在<a href="https://sspanel.xyz/docs/muapi" target="_blank" rel="noopener">这里</a>。简单来讲，如果你通过 API 来与前端通信，你就不需要修改后端的数据库配置了，并且可以使用「自定义加密」、「流量记录」等高级功能。下面我只介绍使用 API 的方法。</p><p>先将代码 clone 到本地：<br><code>git clone https://github.com/fsgmhoward/shadowsocks-py-mu.git</code><br>其中的 shadowsocks 子目录才是我们需要的，外面的是 setup.py 的相关文件。</p><h4 id="配置-shadowsocks-manyuser"><a href="#配置-shadowsocks-manyuser" class="headerlink" title="配置 shadowsocks-manyuser"></a>配置 shadowsocks-manyuser</h4><p>进入 shadowsocks 目录，将 config_example.py 复制一份到 config.py：<br><code>cp config_example.py config.py</code><br>修改其中的部分字段如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">API_ENABLED = True</span><br><span class="line"></span><br><span class="line">API_URL = &apos;http://xxxxxxx/mu&apos;</span><br><span class="line"># 就是上面在 .env 中填写的 muKey 把它填在这里</span><br><span class="line">API_PASS = &apos;api_key_just_for_test&apos;</span><br></pre></td></tr></table></figure></p><p>此时我们就可以试着运行脚本了 <code>python servers.py</code>，<strong>这里要注意是 servers.py，而不是server.py</strong><br>如果没错的话，你大概会看到如下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Dec 03 13:41:18 INFO -----------------------------------------</span><br><span class="line">Dec 03 13:41:18 INFO Multi-User Shadowsocks Server Starting...</span><br><span class="line">Dec 03 13:41:18 INFO Current Server Version: 3.4.0-dev</span><br><span class="line">Dec 03 13:41:18 INFO Now using MultiUser API as the user interface</span><br><span class="line">Dec 03 13:41:18 INFO Now starting manager thread...</span><br><span class="line">Dec 03 13:41:23 INFO Now starting user pulling thread...</span><br><span class="line">Dec 03 13:41:23 INFO Server Added:   P[1025], M[aes-256-cfb], E[xxxxxxxx.com]</span><br></pre></td></tr></table></figure></p><p>其中 P[XXX] 表示用户端口，M[XXX] 表示加密方式，E[XXX] 表示用户的邮箱地址。这些都会随着 ss-panel 前端中用户配置的改变而实时变化。</p><p>此时你虽然已经把 servers.py 跑起来了，但是你应该还不能翻墙，因为还没有打开端口，所以此时你需要打开刚才输出中的端口，ss-panel 新注册的用户所分配的端口均为其 id-1 的用户的端口号 + 1。比如说你把 admin 用户（uid 为1）的端口改为 12450，那么后面注册的新用户的端口就会是 12451, 12452 这样递增的。<br>所以此时你可以批量打开部分端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=xxxx-xxxx/tcp</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl start firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure></p><p>到此，应该可以正常科学上网了。</p><h4 id="配置-ss-manyuser-守护进程"><a href="#配置-ss-manyuser-守护进程" class="headerlink" title="配置 ss-manyuser 守护进程"></a>配置 ss-manyuser 守护进程</h4><p>这里守护进程是希望servers.py在后台隐式运行，你可以：<br><code>pip install supervisor</code><br>创建 supervisor 配置文件:<br><code>echo_supervisord_conf &gt; /etc/supervisord.conf</code><br>配置 supervisor 以监控 ss-manyuser 运行<br><code>/etc/supervisord.conf</code><br>在文件尾部添加如下内容并修改为自己的实际路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:ss-manyuser]</span><br><span class="line">command = python /usr/local/src/shadowsocks-py-mu/shadowsocks/servers.py</span><br><span class="line">user = root</span><br><span class="line">autostart = true</span><br><span class="line">autorestart = true</span><br></pre></td></tr></table></figure></p><p>重启 supervisor 服务以加载配置<br><code>supervisorctl reload</code><br>查看 shadowsocks-manyuser 是否已经运行：<br><code>ps -ef | grep servers.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root     10288  2781  0 13:41 ?        00:00:00 python /usr/local/src/shadowsocks-py-mu/shadowsocks/servers.py</span><br></pre></td></tr></table></figure></p><p>也可以通过以下命令管理 shadowsock-manyuser 的状态<br><code>supervisorctl {start|stop|restart} ss-manyuser</code></p><p>至此，已经完成了多用户控流科学上网的配置了，叫上你的小伙伴一起享受冲浪的乐趣吧！</p><h3 id="常见错误-FAQ"><a href="#常见错误-FAQ" class="headerlink" title="常见错误 FAQ"></a>常见错误 FAQ</h3><p>1 . 查看Nginx服务状态显示 Failed to read PID from file /run/nginx.pid: Invalid argument<br>因为 nginx 启动需要一点点时间，而 systemd 在 nginx 完成启动前就去读取 pid file<br>造成读取 pid 失败<br>解决方法很简单，让 systemd 在执行 ExecStart 的指令后等待一点点时间即可<br>如果你的 nginx 启动需要时间更长，可以把 sleep 时间改长一点<br><code>mkdir -p /etc/systemd/system/nginx.service.d</code><br><code>printf &quot;[Service]\nExecStartPost=/bin/sleep 0.1\n&quot; &gt; /etc/systemd/system/nginx.service.d/override.conf</code><br>然后<br><code>systemctl daemon-reload</code><br><code>systemctl restart nginx.service</code></p><p>2 .  php: command not found<br>原因是你的php并没有配置全局路径，加上绝对路径即可，例如<code>/usr/local/php7/bin/php</code></p><p>3 .  配置ss-panel前端的时候站点提示：502 Bad Gateway<br>因为 nginx 找不到php-fpm了，所以报错，一般是fastcgi_pass后面的路径配置错误了，后面可以是socket或者是ip:port<br>例如：修改php-fpm的配置文件  <code>vi /usr/local/php7/etc/php-fpm.conf</code>   里面的 <code>listen = /tmp/php-fcgi.sock</code>  改为  <code>listen = 127.0.0.1:9000</code></p><p>4 .  站点页面空白，没有任何提示<br>检查你的nginx配置，我的如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  xx.xx.xxx.xxx;   #这里隐藏了我的IP</span><br><span class="line">    index  index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    root         /www/ssmu/public;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5 . 创建管理员账号时：Uncaught PDOException: could not find driver in …<br>原因是缺少php pdo_mysql扩展  安装即可</p><p>6 .  Slim Application Error<br>一般是缺少权限，相应的文件夹赋予权限即可</p>]]></content>
    
    <summary type="html">
    
      真正从0开始搭建,我想这大概是对新手最完整的教程了....
    
    </summary>
    
    
      <category term="Other" scheme="http://blog.92yu.win/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>[译]关于手游网络协议的简单分析</title>
    <link href="http://blog.92yu.win/2017/11/23/%E8%AF%91-%E5%85%B3%E4%BA%8E%E6%89%8B%E6%B8%B8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>http://blog.92yu.win/2017/11/23/译-关于手游网络协议的简单分析/</id>
    <published>2017-11-23T13:21:54.000Z</published>
    <updated>2021-07-04T07:46:32.242Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大多数加密方案都假定可信的发送者和接收者会通过一个不可信的通道通信. 虽然假设发送者会故意尝试愚弄接收者有点荒谬,但这确实是摆在开发者面前的问题。有些玩家是不可信的, 更糟的是, 他们能够通过客户端执行文件获取对加密算法和所有通信的了解。在这样的情况下，我们不可能提供完全安全的通信，但是我们可以为攻击者制造麻烦。本文着重介绍一些实用的技术来为网络游戏建立一个应用程序级通讯协议。</p><h3 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h3><blockquote><p>协议设计在基于客户端/服务器的游戏中是最有趣的，这种游戏由若干不可信的客户端和一个可信的中央服务器通信。(Cheating在点对点的游戏中当然也是个问题，不过因为这样的游戏中没有节点是可信的，所以这种情况是没希望的)在客户端/服务器游戏中cheat的后果是非常严重的，因为服务器作为唯一的可信实体，维护游戏状态并且验证所有客户端命令。当游戏状态稳定后, 一次成功的cheat能够使包括上千个玩家的游戏变得不稳定。</p><p>考虑在客户端/服务器系统中的协议安全性。客户端和服务器在网络通道中发送封包通信，网络通道或许可信(TCP),或许不可信(UDP).尽管客户端之间也能够直接通信，比如文字聊天或者声音，我们假定任何需要安全保证的数据只在客户端和服务器之间发送。</p></blockquote><h3 id="封包篡改-Packet-Tampering"><a href="#封包篡改-Packet-Tampering" class="headerlink" title="封包篡改(Packet Tampering)"></a>封包篡改(Packet Tampering)</h3><blockquote><p>大多数协议hackers是偶然的：他们改变封包中的数个bytes,看看会发生什么。抵御此类攻击的第一道防线是简单的校验和。一个校验和是一个由封包所有的byte组合而成的一个短整数。发送者计算出封包的校验和并连同封包一起发送给接收者。接收者取得封包并重新计算校验和；如果和发送者的校验和不匹配，就认为封包被破坏了并抛弃之。在计算校验和时需要包含整个封包，包括header,这样接收者才能检测出header是否被破坏了。</p><p>一个完美的校验和算法应该能够对封包中的任何字节改动产生不同的值。当然完美的校验和应该too long to be useful，hash函数有着相同的设计目标从而能够产生完美的校验和。单向的hash函数尤其有用，能够把输入变为混乱值，并且逆向重建输入是不可能的。MD5算法经过广泛的检测，被认为是足够快速的并能够胜任游戏使用的算法。其源代码可在网上找到。</p><p>这种简单的校验和机制有两个缺点。第一，因为客户端执行文件包含校验和算法代码，攻击者能够逆向工程出此算法，从而可以为任何消息计算校验和。第二，攻击者能够截获封包并在稍后重发，这也被称为封包重发。</p></blockquote><h3 id="封包重发-Packet-Replay"><a href="#封包重发-Packet-Replay" class="headerlink" title="封包重发(Packet Replay)"></a>封包重发(Packet Replay)</h3><blockquote><p>所谓封包重发，指的是那些不怀好意的玩家截获客户端发出的封包(通常使用某种封包嗅探器)，然后多次发送此包。<br>虽然客户端运用定时器检测机制能够阻止正常客户端过快发送命令，比如定时器没每秒最多发出一个指令，那么无论客户端多么频繁地截获玩家的命令(比如玩家疯狂地按键)，这些命令仍会每秒只发送一次。使用封包重发则是非正规渠道，他是在客户端控制之外重新发送封包，所以能够在一秒内发送相同的指令数百次。</p><p>系统设计者也许会在服务器端使用同样每秒一次的定时器检测机制防御这种攻击。但是由于有网络延迟，这样做显得不切实际。因为虽然能够检测出大多数封包重发攻击，但是网络延迟可能会使多个正常封包同时到达服务器，这样就会引起合法命令被抛弃。我们当然不想我们的安全方案把合法玩家视为cheater。</p><p>为了防范封包重发,每个封包应该包含一些状态信息,以使数据相同的封包也能有不同的位模式。随着发送封包而增长的数字能够担当此任，但此法太容易被攻击者破解。更好的方案是使用状态机为连续封包产生连续ID数。一个快速可信复杂的方法是使用线性同余的随机数产生器(通常在系统库中)。这种产生器工作如下：<br>State = ( State + a ) * b<br>其中a和b都是精心挑选的数字。</p><p>发送者和接收者都为连接准备一个随机数发生器。发送一个封包时，发送者产生一个随机数并把它加入封包，同时更新随机数产生器。接收者检查到来封包中的随机数是否和自己随机数发生器匹配；如果不匹配，可以认为封包有问题；匹配则更新随机数发生器以为下一个封包做准备。</p><p>此法有两个复杂度。<br>第一是发送者和接收者如何同步状态机，可以用相同的种子开始状态机，但是然后初始的封包流将一直有相同的位模式并且会很容易被破解。取而代之的是，服务器用一个随机的种子值初始化他的状态机并将此值作为第一个消息发给客户端。<br>第二个复杂度是如何保持状态机在通讯过程中同步。在可信连接上，封包绝不会丢失，可以保证同步。然而当封包会丢失或重组，状况有点复杂。如果一个消息丢失了，发送者状态机将比接收者快一步；接着的封包将被拒绝，尽管他们是合法的。一个简单的解决方案是依赖于随每个封包一起发送的一个真正的序列号(大多数游戏包含此号码在消息中，以在不可信transport上提供可信链接)。给定一个序列号，接收者可以判断他的状态机跳了多少步以接获当前封包。如果程序允许无序delivery,旧的状态机将不得不保存给一个无序封包到达时使用。</p><p>大多数运行时库提供的rand函数作为一个状态机使用都不够准确因为它的精度太低(许多实现只有15位)并且它显然的选择作为一个源随机数。</p></blockquote><h3 id="其他的技术-Additional-Techniques"><a href="#其他的技术-Additional-Techniques" class="headerlink" title="其他的技术(Additional Techniques)"></a>其他的技术(Additional Techniques)</h3><blockquote><p>理想状况下，两个具有相同payloads的封包应该在bit patterns上尽可能少的暴露相关性，以阻止攻击者对payload进行分析。消除两组数据所有相关性的一个简单方法是用一串随机bits组合他们，使用异或(XOR)操作。想象一下前面所描述的防御封包重发的方案，发送者和接收者已经同步了他们的随机数发生器。因此，发送者能够为每个封包产生一串随机数并把他们异或放进封包payload中；接收者产生同样的一串随机数然后用同样的方法获取原始的payload。<br>两个相同长度的封包的会留给给攻击者一条线索，那就是封包加密了类似的数据。为了进一步阻挡攻击者，封包可以包含一堆随机的”垃圾”数据，此数据只为改变封包长度。垃圾数据的长度通常由另一个状态机决定。发送者检查他的状态机来决定产生多少垃圾数据并将这些随机的bytes插入到即将发送的封包中。接收者简单的忽略这些垃圾数据。增加的垃圾数据进一步隐藏了payload但是耗费更多的带宽。那些受带宽限制的程序，垃圾数据的长度应该比 payload的平均长度更短。</p></blockquote><h3 id="逆向工程-Reverse-Engineering"><a href="#逆向工程-Reverse-Engineering" class="headerlink" title="逆向工程(Reverse Engineering)"></a>逆向工程(Reverse Engineering)</h3><blockquote><p>address最困难的问题以及最终任何阻止篡改协议的方法的缺点就是客户端包含完全的加密算法并且总能够被逆向工程。下面的步骤能够用来使逆向工程更困难：</p><ul><li>发布的任何代码都不该包含任何符号和调试信息。</li><li>不要把对缓冲区加密和解密分别放在他们自己的函数中；应该把它们和一些其他的网络代码放在一起。用可维护性换取安全性这里是值得考虑的。</li><li>应该在运行时计算”魔法数”(不如初始化种子),而不要直接把他们的值放在执行文件中。</li><li>在每个版本的客户端中都包含良好的加密方法，就算是早期的测试。如果某个版本客户端没有加密，用户就能够记录未加密的封包流，并用对封包payload的了解来破解下一个加密版本。</li><li>记住你的目标是让cheating花大代价，而非杜绝cheating。</li></ul></blockquote><h3 id="实现-Implementation"><a href="#实现-Implementation" class="headerlink" title="实现(Implementation)"></a>实现(Implementation)</h3><blockquote><p>本文包含一个C++类SecureTransport,此类使用了所有之前描述过的技术。一个SecureTransport对象封装了发送者和接受者间的一个双向连接。对于每个方向，对象维护4个线性同余的随机数发生器作为协议状态机。这些被初始化为static值，服务器把随机数种子作为第一个消息发给客户端。此类像下面这样使用状态机：</p><ol><li>包头开始异或成员length。(这是不必要的如果底层协议提供封包长度,比如UDP)</li><li>一个消息序列号被用来防止封包重发。</li><li>在每个封包中决定垃圾数据的长度。</li><li>产生随机bits来异或payload(加密).<br>一个独立的随机数发生器被用来产生实际的垃圾数据。在调试时，把垃圾数据设为一个常量是很有用的。</li></ol></blockquote><h4 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h4><p><a href="http://download.csdn.net/download/sinat_28338727/10130031" target="_blank" rel="noopener">封装的socket Demo下载地址 </a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>此文引用至网上某一篇论文，出处不详，在这里再次向作者（Andrew Kirmse）表达敬意以及歉意！<br>原文如下：<br>A Network Protocol for Online Games</p><p>Andrew Kirmse</p><p>Most encryption schemes assume that a trusted sender and a trusted recipient want to communicate over an untrusted channel.It seems absurd to suggest that the sender could deliberately try to fool the recipient, yet this is exactly the problem facing designers of online games.Some players cannot be trusted, and worse, they have complete access to the encryption algorithm and all communications via the client executable. Under such circumstances we cannot hope to provide completely secure communications, but we can make the attacker’s job more trouble than it’s worth. This article presents some pratical techniques for building and application-level communications protocol for online games.</p><p>Definitions</p><p>Protocol design is most interesting in client/server games, where one of more untrusted clients communicate with a trusted central server.(Cleating is certainly also a problem in peer-to-peer games, but because no entity is trusted in such games, the situation is hopeless)The consequences of cheating in a client/server game is high because the server, as the only trusted entity, maintains the game state and verifies all client commands.</p><p>We consider protocol security features in a client/server system.The client and server communicate by sending packets over a network channel, which might be reliable(typically TCP) or unreliable(UDP). Although clients can also communicate directly with each other, perhaps for chat or voice, we assume that any data that need to be secured are sent only between a client and the server.</p><p>Each packet contains two parts: the header, containing administrative information, and the payload, containing the actual data we want to communicate. The goal of the network protocol is to deliver the sender’s original payload to the recipient.Any modifications to the sender’s sequence of payloads should be detected.We deal only with delivery of the payload, leaving the details of packet ordering and reliablility to lower levels in the protocol stack.</p><p>Packet Tampering</p><p>Most protocol hackers are casual: they change bytes in a packet and see what happens. The first line of defense anainst such attacks is a simple checksum. A checksum is a short number produced by combining every byte of the packet.The sender computes the checksum of the packet and sends both the packet and the checksum to the recipient.The recipient takes the packer and recomputes its checksum;if the computed checksum doesn’t match the checksum from the sender, the packet is corrupt and should be rejected.It’s important to include the entire packet, including the header, in the checksum computation, so that the recipient can detect changes to the header as well as the payload.</p><p>A perfect checksum computation would produce a different value if any byte of the packet were changed to any other value. A perfect checksum would be too long to be useful, of course, but hash functions have the same design goal and make excellent checksums. Particularly useful are one-way hash functions, which scramble their input to the extent that reconstructing any part of the input from the hash value is impossible for practical purposes. The MD5 algorithm is well tested, publicly available, and fast enough for use in games. A public domain implementation is available online[Plumb93].</p><p>There are two weaknesses in this simple checksum mechanism. First, because the client executable contains the checksum computation code, and attacker can reverse engineer the checksum algorithm, and then compute valid checksums for any message. Second, and attacker can capture valid packets and resend them later, and attack known as packet replay.</p><p>Packet Replay</p><p>In a packet replay attack, a malicious user captures a packet from the client (typically using a packet sniffer), and sends it multiple times. A common tactic is to use packet replay to perform commands faster than game allows, even if there are timing checks in the client. For example, a client might use a timer to send a certain command to the server at most once per second, no matter how frequently the player issues the command. Using packet replay, a single user might issue the same command hundreds of times per second.</p><p>A system designer might try to stop this particular attack by putting a similar once-per-second timer check on the server as well. In the face of widely variable network latency,howerer,this defense is impractical.Although it detects most packet replay attacks, varying network delays can make packets bunch together by the time they reach the server, causing legal command sequences to be rejected. We certainly do not want our security scheme to mark law-abiding players as cheaters.</p><p>To guard against packet replay, each packet should contain some state information, so that even pakcets with identical payloads have different bit pattern. Something as simple as a number that increments with each sent packet would do, although that scheme is too easy for an attacker to figure out. A better answer is to use a state machine to produce successive identifying numbers for successive packets. A fast and resonably complicated method is a liner congruential random number generator of the type typically found in system libraries. Such generators operate as follows:<br>State = ( State + a ) * b<br>where a and b are carefully chosen integers. (For a discussion of this generators, see [Knuth98].)</p><p>The sender and recipient each keep a liner congruential random number generator for their connections. When sending a packet, the sender produces a random number and adds it to the packet, simultaneously stepping its random number generator. The receiver checks the random number in the incomming packet against its generator; if the numbers don’t match, the packet has been tampered with. If the numbers do match, the receiver steps its random number generator to prepare for the next packet.</p><p>There are two complications with this scheme. The first is how the sender and receiver initially synchronize their state machines.They could each start their state machines with same fixed seed, but then the initial stream of packets would always have the same bit patterns and thus would be vulnerable to analysis.Instead, the server can initialize its state machine with randomly generated seed values and send these to the client in its first message.</p><p>The second complication is how to keep the state machines synchronized during communication. On a reliable connection, packets are never lost, so synchronization is guaranteed. When packets are dropped or reordered, howerver, the situation becomes more complicated. If a message is lost, the sender’s state machine will have advanced one more step than the receiver’s; subsequent packets will be rejected, even though they are legitimate. A simple solution is to rely on a true sequence number sent with each packet (most games include this number with messages anyway, toprovide a reliable connection over an unreliable trasport).Given a sequence number, the receiver can determine how many times to step its state machine to catch up to the current packet. If the application allows out-of-order delivery, the old state of the state machine will have to be stored for use when an out-of-order packet arrivers later.</p><p>The rand function provided with most run-time libraries is inappropriate for use as a state machine because of its low precision (many implementations have only 15 bits) and its obvious choice as a source of random numbers. A fast, high-quality random number implementation is given in [Booth97].</p><p>Additional Techniques</p><p>Ideally, two packets with identical payloads should show as little correlation in their bit patterns as possible, to frustrate analysis of the payload. An easy way to remove all correlation betwen two sets of data is to combine them with a sequence of random bits, using the exclusive-or(XOR) operator.Assuming the previous described packet replay defense, the sender and receiver already have synchronized random number generators.Thus,the sender can generate a sequence of random number for each packet and XOR these into the packet payload; the receiver generates the same sequence of numbers and retrieves the original payload in the same way.</p><p>Even the fact that two packets have the same length can give an attacker a clue that the packets encode similar data. To further frustrate attacks, each packet can contain a variable amout of random “junk” data, meant only to vary the length of the packet. The length of the junk data is determined by yet another synchronized state machine. The sender checks its state machine to determine how much junk to generate and insert that number of random bytes into an outgoing packet. The receiver simply ignores the junk data.Increasing the amount of junk data helps to further hide the payload but costs additional bandwidth. In typical applications in which bandwidth is limited, the average length of junk data should be made small compared to the average payload size.</p><p>Reverse Engineering</p><p>The hardest problem to address, and ultimately the downfall of any scheme to stop protocol tampering, is that the client contains the entire encryption algorithm and thus can always be reverse engineered. Some steps you can take to make reverse engineering harder are as follows:</p><ul><li>Remove all symbols and debugging information from any code released to the public.</li><li>Don’t isolate buffer encryption and decryption in their own function; instead, combine there with some other network code. This is one area in which it can be worthwhile to trade maintainability for security.</li><li>Compute “magic numbers” (such as initialization seeds) at run time instead of placing their values directly in the executable.</li><li>Include a good encryption scheme in every version of the client, even early betas. If any client version lacks encryption, a user can record a stream of unencrypted packets from one client and then use knowledge of the packet payload to help break the encryption in a later version.</li><li>Remember that your goal is to make cheating prohibitively expensive, not impossible.</li></ul><p>Implementation</p><p>The implementation included with this article includes a C++ class SecureTransport that uses all the previously described techniques. A SecureTransport object encapsulates a two-way connection between a sender and a recipient. For each direction, the object maintains four linear congruential random number generators as protocol state machines. These are initialized to static values, with the understanding that the server would send random seeds in its first message to the client. The class uses the state machines as follows:</p><ol><li>It XORs the length field at the start of the header. (This is unnecessary if the underlying protocol provides a packet length as in UDP.)</li><li>A message sequence number is used to prevent packet replay.</li><li>It determines the length of junk data in each packet.</li><li>It generates random bits to XOR the payload.</li></ol><p>A separate random number generator is used to generate the actual junk data. During debugging, it is useful to set the junk data to a known constant value.</p><p>References<br>[Booth97]  Booth,Rick,Inner Loops, Addison-Wesley Developers Press, 1997.<br>[Knuth98] Kunth,Donald,The Art of Computer Programming,Volume 2: Seminnmcrical Algorithms, third edition. Addision-Wesley Longman, Inc, 1998<br>[Plumb93] Plumb,Colin,”md5.c” available online at <a href="http://src.openresources.com/debian/src/admin/html/s/rpm_2.4.12.orig%20rpm-2.4.12%20lib%20md5.c.html" target="_blank" rel="noopener">http://src.openresources.com/debian/src/admin/html/s/rpm_2.4.12.orig%20rpm-2.4.12%20lib%20md5.c.html</a> 1993</p>]]></content>
    
    <summary type="html">
    
      大多数加密方案都假定可信的发送者和接收者会通过一个不可信的通道通信.虽然假设发送者会故意尝试愚弄接收者有点荒谬,但这确实是摆在开发者面前的问题。有些玩家是不可信的, 更糟的是, 他们能够通过客户端执行文件获取对加密算法和所有通信的了解。在这样的情况下，我们不可能提供完全安全的通信，但是我们可以为攻击者制造麻烦。本文着重介绍一些实用的技术来为网络游戏建立一个应用程序级通讯协议。
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.92yu.win/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>可变参数函数</title>
    <link href="http://blog.92yu.win/2017/05/19/%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.92yu.win/2017/05/19/可变函数/</id>
    <published>2017-05-19T14:04:27.000Z</published>
    <updated>2021-07-04T07:46:32.241Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="可变参数函数概述"><a href="#可变参数函数概述" class="headerlink" title="可变参数函数概述"></a>可变参数函数概述</h3><p>在c++的学习和编码过程中，会遇到某些函数的参数是不确定的；其中最常见的就是printf函数，其原型为<br><code>int printf( const char* format, ...);</code><br>它除了有一个参数format固定以外,后面跟的参数的个数和类型是可变的（用三个点“…”做参数占位符）,实际调用时可以有以下的形式：<br><code>printf(&quot;%d&quot;,i);</code><br><code>printf(&quot;%s&quot;,s);</code><br><code>printf(&quot;the number is %d ,string is:%s&quot;, i, s);</code>    </p><h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><p>下面我们通过2个简单的可变参数的C函数来具体分析：</p><h4 id="用最后一个固定参数来确定可变参数的个数"><a href="#用最后一个固定参数来确定可变参数的个数" class="headerlink" title="用最后一个固定参数来确定可变参数的个数"></a>用最后一个固定参数来确定可变参数的个数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;stdarg.h&quot;</span><br><span class="line">void simple_va_fun(int num, ...)</span><br><span class="line">&#123;</span><br><span class="line">    va_list arg_ptr;//这里写的什么list，（搞得好像是得到可变参数列表头一样）其实它就是个字符指针:char *</span><br><span class="line">    int nArgValue = 0;</span><br><span class="line">    va_start(arg_ptr,num);  //以最后一个固定参数num的地址为起点确定变参的内存起始地址。</span><br><span class="line">    printf(&quot;num:%d, *arg_ptr:%d\n&quot;, num, *arg_ptr);// 这里打印下就会看出，*arg_ptr 跳过了num指向了下一个参数</span><br><span class="line">    for (int i = 0; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nArgValue = va_arg(arg_ptr,int);  //得到下一个可变参数的值</span><br><span class="line">        printf(&quot;the %d th arg_ptr: %d \n&quot;,i,nArgValue); //输出各参数的值</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    va_end(arg_ptr);//结束标志</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    simple_va_fun(2, 200, 201);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：<br><code>num:2, *arg_ptr:200</code><br><code>the 0 th arg: 200</code><br><code>the 1 th arg: 201</code></p><h4 id="最后一个参数用负数作为结束标志"><a href="#最后一个参数用负数作为结束标志" class="headerlink" title="最后一个参数用负数作为结束标志"></a>最后一个参数用负数作为结束标志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;stdarg.h&quot;</span><br><span class="line">int test(int tmp, ...)&#123;</span><br><span class="line">    </span><br><span class="line">    va_list arg_ptr;</span><br><span class="line">    va_start(arg_ptr, tmp);</span><br><span class="line">    while(tmp != -1)&#123;</span><br><span class="line">        tmp = va_arg(arg_ptr, int);</span><br><span class="line">        printf(&quot;the %d th arg_ptr: %d \n&quot;,*arg_ptr,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(arg_ptr);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int a = 100, i = 1, j = 2, k = 3, g = -1;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;test1:\n&quot;);</span><br><span class="line">    test(a, i, j, k, g);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;test2:\n&quot;);</span><br><span class="line">    a = 200, i = 11, j = 12, k = 13;</span><br><span class="line">    test(a, i, j, g);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br>test1:<br><code>the 1 th arg_ptr: 1</code><br><code>the 2 th arg_ptr: 2</code><br><code>the 3 th arg_ptr: 3</code><br><code>the -1 th arg_ptr: -1</code><br><code>test2:</code><br><code>the 11 th arg_ptr: 11</code><br><code>the 12 th arg_ptr: 12</code><br><code>the -1 th arg_ptr: -1</code> </p><blockquote><p>这个和上面是一样的，唯一不同的是可变参数列表的第一个参数，没有用来当作参数个数，而是把最后一个参数用负数作为结束标志，参数列表第一个参数在这里的作用仅仅是为了得到可变参数列表的起始地址</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可变参数列表的实现实际上是由几个宏定义组成的，在文件<code>include/stdarg.h</code>中</p><ul><li>var_list用于定义某个变量，其实质是<code>typedef char *va_list;//字符指针类型</code></li><li>va_start(ap, tmp)表示开始获取可变参数列表中的第一个参数（…里面的第一个），跳过最后一个固定参数tmp</li><li>va_arg(ar, type)表示循环获取到可变参数列表中的参数，args指向下一个参数地址，返回的则是当前参数地址，type表示参数类型</li><li>var_end(ap)是结束标志</li></ul><blockquote><p>由此可见，当需求中，参数个数无法确定的时候，可以使用可变参数函数，是很方便的。<br>但是我们可以发现，以上所讲的例子🌰上还是有一定的缺陷的，最起码参数的类型就被限定死了，那么或许有人会问，printf函数不就是实现了能够智能识别参数类型的吗？那是因为函数printf是从固定参数format字符串来分析出参数的类型,再调用va_arg的来获取可变参数的。也就是说,你想实现智能识别可变参数的话是要通过在自己的程序里作判断来实现的。</p></blockquote><h3 id="函数变形（智能识别参数类型）"><a href="#函数变形（智能识别参数类型）" class="headerlink" title="函数变形（智能识别参数类型）"></a>函数变形（智能识别参数类型）</h3><p>综上，可以变形得到下面的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;stdarg.h&quot;</span><br><span class="line">void simple_va_fun(char *fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">    va_list arg_ptr;</span><br><span class="line">    int d;</span><br><span class="line">    char c, *p, *s;</span><br><span class="line">    va_start(arg_ptr, fmt);  //以固定参数的地址为起点确定变参的内存起始地址。</span><br><span class="line">    while (*fmt)</span><br><span class="line">    &#123;</span><br><span class="line">        if (&apos;%&apos; == *fmt) &#123;</span><br><span class="line">            switch (*(++fmt)) &#123;</span><br><span class="line">                case &apos;s&apos;: /* string */</span><br><span class="line">                    s = va_arg(arg_ptr, char *);</span><br><span class="line">                    printf(&quot;-----%s\n&quot;, s);</span><br><span class="line">                    break;</span><br><span class="line">                case &apos;d&apos;: /* int */</span><br><span class="line">                    d = va_arg(arg_ptr, int);</span><br><span class="line">                    printf(&quot;-----%d\n&quot;, d);</span><br><span class="line">                    break;</span><br><span class="line">                case &apos;c&apos;: /* char */</span><br><span class="line">                    /* need a cast here since va_arg only takes fully promoted types */</span><br><span class="line">                    c = (char)va_arg(arg_ptr, int);</span><br><span class="line">                    printf(&quot;-----%c\n&quot;, c);</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    c = *fmt;</span><br><span class="line">                    printf(&quot;-default---%c\n&quot;, c);</span><br><span class="line">            &#125;  // end of switch  </span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            c = *fmt;</span><br><span class="line">            printf(&quot;-else---%c \n &quot;, c);</span><br><span class="line">        &#125;</span><br><span class="line">        ++fmt;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(arg_ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    simple_va_fun(&quot;%s, %d, %c&quot;, &quot;testStr&quot;, 854, &apos;k&apos;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果为：<br><code>-----testStr</code><br><code>-else---,</code><br><code>-else---</code><br><code>-----854</code><br><code>-else---,</code><br><code>-else---</code><br><code>-----k</code></p><p>这里采用类似printf函数的方法，在最后一个固定参数传入可变参数的类型，在运行时智能识别参数类型，并获取到参数的值</p>]]></content>
    
    <summary type="html">
    
      C++可变参数函数的使用及参数获取
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.92yu.win/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>常用的移位预算的意义</title>
    <link href="http://blog.92yu.win/2017/05/19/%E5%B8%B8%E7%94%A8%E7%9A%84%E7%A7%BB%E4%BD%8D%E9%A2%84%E7%AE%97%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>http://blog.92yu.win/2017/05/19/常用的移位预算的意义/</id>
    <published>2017-05-19T10:19:05.000Z</published>
    <updated>2021-07-04T07:46:32.241Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><hr><p>最近发现很多地方用到移位、与等运算代替了常用的乘除法。这样做可以从很大程度上提高程序的效率缩短程序运行时间。但是这样做对于我这样的初学者来说一下子不能快速理解，所以在这里记录下一些常用的运算以及他们所代表的含义：<br>给定一个无符号整数n = 15， 它的二进制数为1111，下面我们结合这个数说说各个运算的含义 </p><ul><li><code>n &gt;&gt; 1</code> 将n向右移动一位，变为<code>0111 = 7</code>, 表示的数学含义是 <code>n/2</code></li><li><code>n &lt;&lt; 1</code> 将n向左移动一位，变为<code>11110 = 30</code>，表示的数学含义是 <code>n * 2</code></li><li><code>n &amp; 0X1</code> 常用语判断n的奇偶性，如果<code>n &amp; 0X1 == 1</code> 说明n的二进制中最后一位是1，即n是奇数<br> 如果 <code>n &amp; 0X1 == 0</code>说明n的二进制位最后一位是0，即n是偶数</li><li><code>n &amp; (n-1)</code>  所得结果是将n的最右边的1去掉<br> <code>n &amp; (n-1)</code>  统计N的二进制数中1的个数<br> <code>n | (n-1)</code>  统计N的二进制数中0的个数<br><strong><em>eg : </em></strong>  求一个数n的二进制位中1的个数<blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int counter = 0;</span><br><span class="line">while(n)</span><br><span class="line">&#123;</span><br><span class="line">    ++counter;</span><br><span class="line">    n = n &amp; (n - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><code>n &amp; (n - 1) == 0</code> 表示n是2的整数次幂<br><code>n &amp; (n - 1) != 0</code> 表示n不是2的整数次幂</p>]]></content>
    
    <summary type="html">
    
      常用的位移预算的意义
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.92yu.win/tags/C/"/>
    
  </entry>
  
</feed>
